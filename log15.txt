[0m[[0minfo[0m] [0mLoading project definition from /Users/glyph/Documents/sbt/scalagamerepo/project[0m
[0m[[0minfo[0m] [0mSet current project to android (in build file:/Users/glyph/Documents/sbt/scalagamerepo/)[0m
[0m[[0minfo[0m] [0mCompiling 2 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanAllWithException(fixedFuture)(3)(((p) => {
  val opt = swiping().get(p);
  if (opt.isDefined)
    opt.get.isEmpty.unary_$bang
  else
    false
}))
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
    val opt = swiping().get(p);
    if (opt.isDefined)
      opt.get.isEmpty.unary_$bang
    else
      false
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$2) => x$2._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
    {
      falling.update(falling().append(filling));
      future.update(fixed().append(falling()));
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$23._1;
        val y = x$23._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      futureIndexed.$bar$greater(panelAdd)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
      {
        falling.update(falling().append(filling));
        future.update(fixed().append(falling()));
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$23._1;
          val y = x$23._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        futureIndexed.$bar$greater(panelAdd)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$27._1;
      val fallen = x$27._2;
      fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$27._1;
        val fallen = x$27._2;
        fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$29._1;
    val ty = x$29._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$29._1;
      val ty = x$29._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
      val opt = swiping().get(p);
      if (opt.isDefined)
        opt.get.isEmpty.unary_$bang
      else
        false
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
        {
          falling.update(falling().append(filling));
          future.update(fixed().append(falling()));
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$23._1;
            val y = x$23._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          futureIndexed.$bar$greater(panelAdd)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$27._1;
          val fallen = x$27._2;
          fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$29._1;
        val ty = x$29._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$31) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$32) => x$32.get(AP.this).map(((x$33) => x$33.isEmpty.unary_$bang)).$bar(false)));
    lazy val isFalling = falling.map(((x$34) => x$34.exists(((x$35) => x$35.contains(AP.this)))));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$36) => x$36.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
before
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*))
after
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$2)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$2)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$3 = processing;
      Nil.$colon$colon(x$3)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$4 = head;
        processing.$colon$colon(x$4)
      })
    else
      {
        <synthetic> val x$6 = processing;
        rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$3 = processing;
        Nil.$colon$colon(x$3)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$4 = head;
          processing.$colon$colon(x$4)
        })
      else
        {
          <synthetic> val x$6 = processing;
          rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$7 = buffer;
      result.$colon$colon(x$7)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$9 = {
        <synthetic> val x$8 = head;
        buffer.$colon$colon(x$8)
      };
      result.$colon$colon(x$9)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$10 = second;
        tail.$colon$colon(x$10)
      }, {
        <synthetic> val x$11 = first;
        buffer.$colon$colon(x$11)
      }, result)
    else
      rec({
        <synthetic> val x$12 = second;
        tail.$colon$colon(x$12)
      }, Nil, {
        <synthetic> val x$14 = {
          <synthetic> val x$13 = first;
          buffer.$colon$colon(x$13)
        };
        result.$colon$colon(x$14)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$7 = buffer;
        result.$colon$colon(x$7)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$9 = {
          <synthetic> val x$8 = head;
          buffer.$colon$colon(x$8)
        };
        result.$colon$colon(x$9)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$10 = second;
          tail.$colon$colon(x$10)
        }, {
          <synthetic> val x$11 = first;
          buffer.$colon$colon(x$11)
        }, result)
      else
        rec({
          <synthetic> val x$12 = second;
          tail.$colon$colon(x$12)
        }, Nil, {
          <synthetic> val x$14 = {
            <synthetic> val x$13 = first;
            buffer.$colon$colon(x$13)
          };
          result.$colon$colon(x$14)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$2)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$3 = processing;
          Nil.$colon$colon(x$3)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$4 = head;
            processing.$colon$colon(x$4)
          })
        else
          {
            <synthetic> val x$6 = processing;
            rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$7 = buffer;
          result.$colon$colon(x$7)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$9 = {
            <synthetic> val x$8 = head;
            buffer.$colon$colon(x$8)
          };
          result.$colon$colon(x$9)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$10 = second;
            tail.$colon$colon(x$10)
          }, {
            <synthetic> val x$11 = first;
            buffer.$colon$colon(x$11)
          }, result)
        else
          rec({
            <synthetic> val x$12 = second;
            tail.$colon$colon(x$12)
          }, Nil, {
            <synthetic> val x$14 = {
              <synthetic> val x$13 = first;
              buffer.$colon$colon(x$13)
            };
            result.$colon$colon(x$14)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$22)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$22)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[0minfo[0m] [0mCompiling 5 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*))
after
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$2)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$2)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$3 = processing;
      Nil.$colon$colon(x$3)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$4 = head;
        processing.$colon$colon(x$4)
      })
    else
      {
        <synthetic> val x$6 = processing;
        rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$3 = processing;
        Nil.$colon$colon(x$3)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$4 = head;
          processing.$colon$colon(x$4)
        })
      else
        {
          <synthetic> val x$6 = processing;
          rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$7 = buffer;
      result.$colon$colon(x$7)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$9 = {
        <synthetic> val x$8 = head;
        buffer.$colon$colon(x$8)
      };
      result.$colon$colon(x$9)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$10 = second;
        tail.$colon$colon(x$10)
      }, {
        <synthetic> val x$11 = first;
        buffer.$colon$colon(x$11)
      }, result)
    else
      rec({
        <synthetic> val x$12 = second;
        tail.$colon$colon(x$12)
      }, Nil, {
        <synthetic> val x$14 = {
          <synthetic> val x$13 = first;
          buffer.$colon$colon(x$13)
        };
        result.$colon$colon(x$14)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$7 = buffer;
        result.$colon$colon(x$7)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$9 = {
          <synthetic> val x$8 = head;
          buffer.$colon$colon(x$8)
        };
        result.$colon$colon(x$9)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$10 = second;
          tail.$colon$colon(x$10)
        }, {
          <synthetic> val x$11 = first;
          buffer.$colon$colon(x$11)
        }, result)
      else
        rec({
          <synthetic> val x$12 = second;
          tail.$colon$colon(x$12)
        }, Nil, {
          <synthetic> val x$14 = {
            <synthetic> val x$13 = first;
            buffer.$colon$colon(x$13)
          };
          result.$colon$colon(x$14)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$2)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$3 = processing;
          Nil.$colon$colon(x$3)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$4 = head;
            processing.$colon$colon(x$4)
          })
        else
          {
            <synthetic> val x$6 = processing;
            rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$7 = buffer;
          result.$colon$colon(x$7)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$9 = {
            <synthetic> val x$8 = head;
            buffer.$colon$colon(x$8)
          };
          result.$colon$colon(x$9)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$10 = second;
            tail.$colon$colon(x$10)
          }, {
            <synthetic> val x$11 = first;
            buffer.$colon$colon(x$11)
          }, result)
        else
          rec({
            <synthetic> val x$12 = second;
            tail.$colon$colon(x$12)
          }, Nil, {
            <synthetic> val x$14 = {
              <synthetic> val x$13 = first;
              buffer.$colon$colon(x$13)
            };
            result.$colon$colon(x$14)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$22)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$22)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[33mwarn[0m] [0m/Users/glyph/Documents/sbt/scalagamerepo/common/src/main/scala/com/glyph/scala/game/action_puzzle/ActionPuzzle.scala:66: a pure expression does nothing in statement position; you may be omitting necessary parentheses[0m
[0m[[33mwarn[0m] [0m    idle(cb)[0m
[0m[[33mwarn[0m] [0m         ^[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanAllWithException(fixedFuture)(3)(((p) => {
  val opt = swiping().get(p);
  if (opt.isDefined)
    opt.get.isEmpty.unary_$bang
  else
    false
}))
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
    val opt = swiping().get(p);
    if (opt.isDefined)
      opt.get.isEmpty.unary_$bang
    else
      false
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$2) => x$2._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
    {
      falling.update(falling().append(filling));
      future.update(fixed().append(falling()));
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$23._1;
        val y = x$23._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      futureIndexed.$bar$greater(panelAdd)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
      {
        falling.update(falling().append(filling));
        future.update(fixed().append(falling()));
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$23._1;
          val y = x$23._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        futureIndexed.$bar$greater(panelAdd)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$27._1;
      val fallen = x$27._2;
      fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$27._1;
        val fallen = x$27._2;
        fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$29._1;
    val ty = x$29._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$29._1;
      val ty = x$29._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
      val opt = swiping().get(p);
      if (opt.isDefined)
        opt.get.isEmpty.unary_$bang
      else
        false
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
        {
          falling.update(falling().append(filling));
          future.update(fixed().append(falling()));
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = filling.indexOfPanelUnhandled(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$23 = future().indexOfPanelUnhandled(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$23._1;
            val y = x$23._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          futureIndexed.$bar$greater(panelAdd)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$27._1;
          val fallen = x$27._2;
          fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$29._1;
        val ty = x$29._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$31) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$32) => x$32.get(AP.this).map(((x$33) => x$33.isEmpty.unary_$bang)).$bar(false)));
    lazy val isFalling = falling.map(((x$34) => x$34.exists(((x$35) => x$35.contains(AP.this)))));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$36) => x$36.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
[0m[[33mwarn[0m] [0mthere were 2 feature warning(s); re-run with -feature for details[0m
[0m[[33mwarn[0m] [0mtwo warnings found[0m
[0m[[0minfo[0m] [0mRunning com.glyph.Main [0m
[0m[[0minfo[0m] [0m{"screenClass":{"class":"com.glyph.scala.game.action_puzzle.screen.ActionScreen"},"assets":[{"_1":{"class":"com.badlogic.gdx.graphics.Texture"},"_2":["data/dummy.png","data/particle.png","data/sword.png"]},{"_1":{"class":"com.badlogic.gdx.scenes.scene2d.ui.Skin"},"_2":["skin/default.json"]}]}[0m
[0m[[0minfo[0m] [0mspecified resource directory:../common/src/main/resources=>/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources[0m
[0m[[0minfo[0m] [0mstart Memory Analyzer[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mCreated LoadingScreen[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.lib.libgdx.screen.LoadingScreen@690d76d5[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)5581000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)21185000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)5631000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)444000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)5967000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)1475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)187000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1632000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)44106000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)1871000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)5226000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)5526000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)2061000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)425000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)356000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)407000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)475000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)771000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1259000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)410000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1539000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)2170000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)354000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)345000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)350000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1736000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)369000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)14668000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)360000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)364000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)373000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)376000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)380000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)360000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)374000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)384000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)408000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)356000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)393000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)413000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)438000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)378000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)425000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)339000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)366000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)365000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)357000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1275000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)373000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1124000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)413000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)677000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)374000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)362000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)392000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)400000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)403000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)507000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)568000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)370000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)364000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1167000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)613000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)388000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)3123000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)448000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)13723000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)645000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)384000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)388000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)409000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)416000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)822000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)854000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)251000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)233000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1085000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)321000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)276000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)599000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)276000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)271000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)262000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)263000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)271000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)273000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)281000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)285000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)289000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)293000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)276000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)272000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)330000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)303000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)290000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)5070000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)313000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1647000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1830000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)300000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)303000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)2225000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1771000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1356000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)313000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)311000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)293000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)300000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)4360000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)339000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)306000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)306000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)304000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1450000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)659000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)314000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1819000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)7874000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)346000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)2385000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)14864000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)275000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)246000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1889000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)259000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)260000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)4841000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)233000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)298000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)248000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)271000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)238000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1606000[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)11192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)428682000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initialize)428756000[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.game.action_puzzle.screen.ActionScreen@53ce3f4b[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19862000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26974000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)27130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12951000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)3166000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)109000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)16033000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)139000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)552000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)75000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)175000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)73000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)73000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)28015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)58152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2381000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)3101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)63910000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)104464000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)104549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)619000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10031000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4160000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)32200000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)82000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)123000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)104000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)690000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)83000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)80000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)36702000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)37947000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)3060000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)5402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)383000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)9551000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)4056000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1967000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)58490000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1418000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)359000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)5118000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)129000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)129000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)141000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)180000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)195000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)613000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)79000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)77000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)82000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)1157000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)34453000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)131068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)167599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)443000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1910000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)3227000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)73000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4357000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)91000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)103000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)205000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)709000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)66000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)65000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)75000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)12082000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)13039000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)5607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5726000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2535000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)3136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)39251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)39325000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)450000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1087000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6169000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)9136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)10087000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)12838000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2065000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)25712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)53486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)53556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)445000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1096000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)110000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)12914000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)17986000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)3944000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4049000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)4971000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5500000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)28292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)60478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)60551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)422000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1014000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)65000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2973000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)10346000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1528000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2033000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)17040000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)40655000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)40737000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)1206000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)2022000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)4135000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)586000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)10944000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)12695000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1418000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2535000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)3053000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)19554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)52494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)52567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)469000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2195000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)480000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)676000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)1340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)285000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)307000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1028000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)18623000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)876000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)328000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)720000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2552000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)197000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)145000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)151000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)62000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)57000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)59000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)18942000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)43069000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)121192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)121279000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)729000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)4816000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)7435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)8745000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)463000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)695000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)533000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)294000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1925000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)934000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)23647000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1515000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)390000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)287000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2092000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)147000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)88000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)83000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)4119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)18119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)50688000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)76084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)76155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)455000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1006000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)9408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)4867000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)3204000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)304000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)284000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1857000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)37548000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)694000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)331000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)307000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1965000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)190000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)118000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)118000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)102000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)49000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)50000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)730000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)11620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)58804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)111592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111666000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)437000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)60728000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)69090000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)72817000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1689000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)877000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)75599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)84048000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)84117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)435000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1453000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)495000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)559000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)925000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8913000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)464000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1143000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)400000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)370000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)485000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)549000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)846000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12978000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13077000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)507000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1392000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5674000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)1475000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)597000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)273000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)287000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)10751000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)686000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)468000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)260000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2358000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)140000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)130000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)135000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)62000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)26712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)50809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)50883000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)545000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1038000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2870000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)8014000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)369000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)740000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)9304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)16802000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16875000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)831000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)6449000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)12283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)13646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)632000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)603000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)719000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)294000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)22361000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)689000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)420000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)261000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1986000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)183000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)104000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)105000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)50000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)41000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)224000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)46525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)52101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)52179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)509000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)981000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4788000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)283000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)655000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5900000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)763000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)873000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)996000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1389000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)885000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1006000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)785000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)909000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)820000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)943000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1039000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)797000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)765000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1909000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2044000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)786000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)912000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)856000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)486000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1081000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)11209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)14462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)743000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)17695000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)21219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)21293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)773000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)981000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3010000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)560000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1066000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6662000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10996000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11073000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)513000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)958000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)246000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)205000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)688000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8657000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)504000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)943000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)67000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3779000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4864000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8079000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)523000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)971000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2990000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3895000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)222000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)548000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)961000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)76000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4318000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)207000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7002000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11696000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)23026000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)23102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)453000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)575000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)573000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)473000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)597000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)577000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)886000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1006000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)513000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1071000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3862000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)544000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)255000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)277000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)9058000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1015000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)695000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)265000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3668000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)115000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)131000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)52000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)12440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)25532000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28800000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)28873000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)827000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)805000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)723000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)845000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)810000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)827000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)709000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)830000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)700000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)706000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)827000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)833000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)687000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)807000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)692000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)813000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)469000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)983000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2757000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)286000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)389000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)852000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)524000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)942000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)83000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2850000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3783000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4815000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7970000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)468000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1043000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2861000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3713000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)251000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)603000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4739000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)16058000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)493000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)994000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)513000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)5539000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)542000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)267000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1706000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)18779000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)631000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)293000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)247000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2490000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)110000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)98000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)98000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)91000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)43000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)32643000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)43119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)43193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)662000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)603000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)725000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)738000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)674000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)798000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)606000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)744000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)425000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)883000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)812000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)229000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3614000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4389000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)229000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5402000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9628000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9701000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)936000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)85000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2736000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)351000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)431000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)256000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)253000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1744000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)123000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)9638000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1706000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)289000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1679000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)128000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)117000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)50000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)8784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)26211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)346000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)934000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)213000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)363000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)949000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)227000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2898000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)209000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4541000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7698000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)445000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)979000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2688000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)204000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)528000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8657000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)487000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)456000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2828000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2959000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)508000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)916000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)505000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)519000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)400000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)507000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)505000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)508000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)445000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)505000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)396000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)885000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7087000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)367000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)905000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2653000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)164000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)91000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7080000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)478000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)874000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)234000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3491000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)151000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)615000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7959000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8026000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)388000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)887000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)165000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)756000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)369000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)874000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2600000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)158000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)7829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)402000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)885000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)120000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6077000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10129000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1055000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2723000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)393000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)218000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)222000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6944000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)729000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)284000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)218000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1612000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)2837000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)120000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)443000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)12248000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24991000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)25056000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)981000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)558000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)632000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)497000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)465000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)656000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)778000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)552000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)560000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)674000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)925000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)164000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)91000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)519000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4394000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6502000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)381000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)940000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2595000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3318000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)90000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)143000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)63000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)470000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4083000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)365000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)11163000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)386000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)13085000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)15322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)1185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)292000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)227000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2631000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)7676000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)751000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)303000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)258000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)5610000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)123000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)92000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)103000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)45000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)37000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)11480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)34622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)38350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)38469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)410000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)813000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)88000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)151000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)60000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)465000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6392000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8673000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)388000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)389000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)262000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)312000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)367000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)912000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)64000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)458000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3938000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)337000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)911000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)60000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)8000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3765000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5362000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)85125000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)130433000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)345000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1029000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2653000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)60000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3900000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)123000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)107000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)290000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)222000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)299000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4247000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)290000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)291000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)11420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)606000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)436000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)366000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)429000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)802000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)57000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)345000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)784000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3024000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)58000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)8000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)392000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3605000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8083000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)501000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)797000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)345000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)423000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)461000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)214000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4947000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)657000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)363000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1615000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)143000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)127000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)127000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)55000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)52000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6850000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)15093000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)18954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)438000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)247000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)248000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)714000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)325000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)360000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)757000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)118000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)97000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3797000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)370000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)873000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)40000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)87000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)22000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7614000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)342000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)707000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)58000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)401000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)110000[0m
[0m[[0minfo[0m] [0mtotal heap: 3572kb[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)418000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2129000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4811000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)215000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)262000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)412000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)717000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)117000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5218000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)7474000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)8201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)360000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)210000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)212000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1418000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5391000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)927000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)267000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)216000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1912000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)134000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)135000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)132000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)141000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)148000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)49000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)8302000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22021000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)25053000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)605000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)557000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)649000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)769000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)677000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)822000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)817000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)847000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)939000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)863000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)534000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)654000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)575000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)314000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1048000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)340000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)474000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)218000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4437000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)544000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)247000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1501000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)155000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)140000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)132000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)53000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5834000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)13624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)318000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1074000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3886000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)147000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)85000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4653000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)352000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)703000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)155000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)81000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)471000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5335000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)311000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)726000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2921000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)87000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)131000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5029000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)314000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)314000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)333000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)325000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)405000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)349000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)357000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)905000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2759000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)81000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)124000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)64000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)310000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)706000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1980000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)114000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)57000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)704000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1902000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2468000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)62000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)104000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)327000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)737000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1931000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2515000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)105000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)511000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)532000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)626000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)224000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)318000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)308000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)327000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)694000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1946000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)92000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)320000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)691000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)67000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2281000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)345000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)377000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)197000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)205000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4243000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)592000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1455000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)132000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)135000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)136000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12902000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14067000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)334000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)333000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)234000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)334000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)234000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)344000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)290000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)418000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)248000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)418000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)335000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)697000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)325000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)193000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)203000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1396000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5292000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)883000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)256000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1466000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)91000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)97000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)110000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)123000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)125000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)128000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)41000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)42000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)43000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)15403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)18697000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)783000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)786000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)800000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)945000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)786000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)286000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)684000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1810000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)220000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)278000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)687000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)9128000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)11034000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)11576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)237000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)529000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12461000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)294000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)686000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1776000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)220000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)284000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)700000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2036000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2568000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)195000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5933000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5982000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)680000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1805000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)179000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4953000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5002000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)683000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1743000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)172000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)495000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3073000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4859000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)285000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)677000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1730000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)170000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)122000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4886000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4936000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)762000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)678000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)807000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)593000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)719000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)704000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)615000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)706000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)694000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)743000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)875000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)968000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)313000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)756000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)306000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)363000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)201000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)214000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4544000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)544000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1486000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)114000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)9695000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)129000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)56000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)40000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)15651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22716000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)292000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)657000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)75000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1807000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)120000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)160000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3123000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4694000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4743000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)313000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)660000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1692000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)287000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)202000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)196000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4373000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)630000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)13304000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)287000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1788000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)66000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)72000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)82000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)96000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)37000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)22809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)29598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)31346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)790000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1666000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1760000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)797000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2647000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2742000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)758000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)739000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)836000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)649000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)739000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)688000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)777000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)687000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)688000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)608000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)700000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)317000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)680000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1906000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)144000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)185000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4500000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)247000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)8165000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)9242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)9747000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)179000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2568000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12605000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13944000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13991000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)230000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)631000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)183000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4065000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)179000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)797000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)11111000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)76000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)13400000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)13826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)171000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)14566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15836000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)187000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)67000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)565000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)208000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)184000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)532000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1833000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)122000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)433000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)546000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)199000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)390000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)119000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)81000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2092000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3065000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)469000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)368000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1945000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)185000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)360000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)198000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3635000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)515000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)239000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)187000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1581000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)89000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)68000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)70000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)31000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)32000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)84000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10485000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)240000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)854000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1711000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)194000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)364000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)217000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3251000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)494000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)223000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1334000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)64000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)64000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)37000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)26000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)83000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4924000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11318000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)850000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)372000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)424000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)181000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)867000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)80000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1787000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)118000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)122000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)181000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)383000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1215000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)83000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)106000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2785000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)274000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)383000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)172000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)479000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)205000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4584000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)552000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1750000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)117000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)107000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)119000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)45000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)41000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11245000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)677000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)755000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)615000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)535000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)599000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)334000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)519000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)758000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)680000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)329000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1497000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)776000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)722000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)766000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)729000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)725000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)723000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)725000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)739000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)529000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)941000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)807000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)682000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)904000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)787000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)745000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)522000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)384000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)105000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)987000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)165000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!1[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)20050000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!2[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)1143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)213000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)178000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)25017000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)641000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)237000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)173000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1344000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)63000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)73000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)86000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)99000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)35000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)64000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)31625000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)34664000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)391000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)871000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)301000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2093000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)147000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)861000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1995000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3465000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5568000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)172000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)824000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)148000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)203000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4142000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)547000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)254000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2527000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)119000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)119000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)131000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)43000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)14997000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24900000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24947000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)894000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)967000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)879000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)948000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)892000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)960000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)994000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1062000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)950000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1000000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)879000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)949000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)948000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)894000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1053000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4337000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4407000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)916000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)991000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)989000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1053000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)882000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)952000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)974000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1039000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)874000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)941000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)876000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)945000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1009000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)157000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)381000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)146000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)193000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1035000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)214000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2982000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)559000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)237000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)172000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1009000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)93000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)97000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)112000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)41000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10056000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10091000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)375000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)89000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)917000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)248000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)519000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2031000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3507000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)157000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)375000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)171000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)376000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)816000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)246000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1932000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3427000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)152000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)815000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)226000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2018000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3535000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)815000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)207000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1833000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)161000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)821000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)187000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)144000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1806000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3037000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)163000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)384000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)825000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)169000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3014000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)631000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)606000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)633000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)698000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)711000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)541000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)681000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)615000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)552000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)617000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)173000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)394000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)837000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)162000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)15000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)1000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)187000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1044000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3267000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)542000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)234000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)173000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)992000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)112000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)123000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)137000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)45000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)54000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9949000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9989000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)153000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)224000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1867000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)813000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)141000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3056000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)531000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)238000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1009000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)85000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)82000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)98000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)38000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)39000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)37000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8942000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)909000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)975000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)970000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)898000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)968000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)892000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)964000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)885000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)955000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)986000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)909000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)980000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)891000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)959000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1485000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1568000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1099000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)964000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1028000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1066000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)978000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)953000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1021000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)889000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)994000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)899000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)966000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)891000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)976000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)908000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)974000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)904000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)972000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)946000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)893000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)978000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)583000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1011000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3856000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3889000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)360000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)878000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1224000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)285000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)473000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2044000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3471000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)364000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)800000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)196000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1930000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)220000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)539000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)950000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)147000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)965000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3404000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)828000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)236000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)369000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)983000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)488000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)173000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)113000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)124000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)136000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)148000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)41000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)44000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6950000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11805000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13379000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)360000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)798000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)200000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)182000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)362000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)788000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)185000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)144000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1794000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3031000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3061000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)162000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)870000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1825000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3025000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3057000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)165000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)594000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3825000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4990000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5366000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)173000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)331000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)175000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)174000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)123000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2937000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)531000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)230000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1150000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)80000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)71000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)74000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)36000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)40000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)33000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12862000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13998000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)625000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)573000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)697000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)717000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)872000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1010000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)853000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)654000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)631000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)645000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1740000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)603000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)613000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)163000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1099000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)156000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)413000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2838000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)365000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)793000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1090000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)140000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)394000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1683000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2752000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2782000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)366000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)796000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)154000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)363000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)307000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)960000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3129000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)537000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)234000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1076000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)128000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)128000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)140000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)50000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)46000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,indexOfPanelUnhandled)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8656000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9656000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)481000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1754000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)467000[0m
[0m[[0minfo[0m] [0mpause![0m
java.lang.RuntimeException: Nonzero exit code returned from runner: 255
	at scala.sys.package$.error(package.scala:27)
[0m[[31mtrace[0m] [0mStack trace suppressed: run [34mlast desktop/compile:run[0m for the full output.[0m
[0m[[31merror[0m] [0m(desktop/compile:[31mrun[0m) Nonzero exit code returned from runner: 255[0m
[0m[[31merror[0m] [0mTotal time: 153 s, completed 2013/11/15 17:17:08[0m
