[0m[[0minfo[0m] [0mLoading project definition from /Users/glyph/Documents/sbt/scalagamerepo/project[0m
[0m[[0minfo[0m] [0mSet current project to android (in build file:/Users/glyph/Documents/sbt/scalagamerepo/)[0m
[0m[[0minfo[0m] [0mCompiling 2 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanAllWithException(fixedFuture)(3)(((p) => {
  val opt = swiping().get(p);
  if (opt.isDefined)
    opt.get.isEmpty.unary_$bang
  else
    false
}))
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
    val opt = swiping().get(p);
    if (opt.isDefined)
      opt.get.isEmpty.unary_$bang
    else
      false
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$2) => x$2._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
    {
      falling.update(falling().append(filling));
      future.update(fixed().append(falling()));
      val fillingMap = filling.toIndexMap;
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      val futureMap = futureIndices();
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$23._1;
        val y = x$23._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      futureIndexed.$bar$greater(panelAdd)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
      {
        falling.update(falling().append(filling));
        future.update(fixed().append(falling()));
        val fillingMap = filling.toIndexMap;
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        val futureMap = futureIndices();
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$23._1;
          val y = x$23._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        futureIndexed.$bar$greater(panelAdd)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$27._1;
      val fallen = x$27._2;
      fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$27._1;
        val fallen = x$27._2;
        fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$29._1;
    val ty = x$29._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$29._1;
      val ty = x$29._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
      val opt = swiping().get(p);
      if (opt.isDefined)
        opt.get.isEmpty.unary_$bang
      else
        false
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
        {
          falling.update(falling().append(filling));
          future.update(fixed().append(falling()));
          val fillingMap = filling.toIndexMap;
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          val futureMap = futureIndices();
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$23._1;
            val y = x$23._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          futureIndexed.$bar$greater(panelAdd)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$27._1;
          val fallen = x$27._2;
          fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$29._1;
        val ty = x$29._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$31) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$32) => x$32.get(AP.this).map(((x$33) => x$33.isEmpty.unary_$bang)).$bar(false)));
    lazy val isFalling = falling.map(((x$34) => x$34.exists(((x$35) => x$35.contains(AP.this)))));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$36) => x$36.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
before
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*))
after
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$2)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$2)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$3 = processing;
      Nil.$colon$colon(x$3)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$4 = head;
        processing.$colon$colon(x$4)
      })
    else
      {
        <synthetic> val x$6 = processing;
        rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$3 = processing;
        Nil.$colon$colon(x$3)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$4 = head;
          processing.$colon$colon(x$4)
        })
      else
        {
          <synthetic> val x$6 = processing;
          rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$7 = buffer;
      result.$colon$colon(x$7)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$9 = {
        <synthetic> val x$8 = head;
        buffer.$colon$colon(x$8)
      };
      result.$colon$colon(x$9)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$10 = second;
        tail.$colon$colon(x$10)
      }, {
        <synthetic> val x$11 = first;
        buffer.$colon$colon(x$11)
      }, result)
    else
      rec({
        <synthetic> val x$12 = second;
        tail.$colon$colon(x$12)
      }, Nil, {
        <synthetic> val x$14 = {
          <synthetic> val x$13 = first;
          buffer.$colon$colon(x$13)
        };
        result.$colon$colon(x$14)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$7 = buffer;
        result.$colon$colon(x$7)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$9 = {
          <synthetic> val x$8 = head;
          buffer.$colon$colon(x$8)
        };
        result.$colon$colon(x$9)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$10 = second;
          tail.$colon$colon(x$10)
        }, {
          <synthetic> val x$11 = first;
          buffer.$colon$colon(x$11)
        }, result)
      else
        rec({
          <synthetic> val x$12 = second;
          tail.$colon$colon(x$12)
        }, Nil, {
          <synthetic> val x$14 = {
            <synthetic> val x$13 = first;
            buffer.$colon$colon(x$13)
          };
          result.$colon$colon(x$14)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$2)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$3 = processing;
          Nil.$colon$colon(x$3)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$4 = head;
            processing.$colon$colon(x$4)
          })
        else
          {
            <synthetic> val x$6 = processing;
            rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$7 = buffer;
          result.$colon$colon(x$7)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$9 = {
            <synthetic> val x$8 = head;
            buffer.$colon$colon(x$8)
          };
          result.$colon$colon(x$9)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$10 = second;
            tail.$colon$colon(x$10)
          }, {
            <synthetic> val x$11 = first;
            buffer.$colon$colon(x$11)
          }, result)
        else
          rec({
            <synthetic> val x$12 = second;
            tail.$colon$colon(x$12)
          }, Nil, {
            <synthetic> val x$14 = {
              <synthetic> val x$13 = first;
              buffer.$colon$colon(x$13)
            };
            result.$colon$colon(x$14)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    def toIndexMap = GMatch3.toIndexMap(puzzle);
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap = GMatch3.toIndexMap(puzzle)
after
def toIndexMap = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.toIndexMap(puzzle);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$22)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$22)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.toIndexMap(puzzle);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[0minfo[0m] [0mCompiling 5 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*))
after
def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$2)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$2)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$3 = processing;
      Nil.$colon$colon(x$3)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$4 = head;
        processing.$colon$colon(x$4)
      })
    else
      {
        <synthetic> val x$6 = processing;
        rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$3 = processing;
        Nil.$colon$colon(x$3)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$4 = head;
          processing.$colon$colon(x$4)
        })
      else
        {
          <synthetic> val x$6 = processing;
          rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$7 = buffer;
      result.$colon$colon(x$7)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$9 = {
        <synthetic> val x$8 = head;
        buffer.$colon$colon(x$8)
      };
      result.$colon$colon(x$9)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$10 = second;
        tail.$colon$colon(x$10)
      }, {
        <synthetic> val x$11 = first;
        buffer.$colon$colon(x$11)
      }, result)
    else
      rec({
        <synthetic> val x$12 = second;
        tail.$colon$colon(x$12)
      }, Nil, {
        <synthetic> val x$14 = {
          <synthetic> val x$13 = first;
          buffer.$colon$colon(x$13)
        };
        result.$colon$colon(x$14)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$7 = buffer;
        result.$colon$colon(x$7)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$9 = {
          <synthetic> val x$8 = head;
          buffer.$colon$colon(x$8)
        };
        result.$colon$colon(x$9)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$10 = second;
          tail.$colon$colon(x$10)
        }, {
          <synthetic> val x$11 = first;
          buffer.$colon$colon(x$11)
        }, result)
      else
        rec({
          <synthetic> val x$12 = second;
          tail.$colon$colon(x$12)
        }, Nil, {
          <synthetic> val x$14 = {
            <synthetic> val x$13 = first;
            buffer.$colon$colon(x$13)
          };
          result.$colon$colon(x$14)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  def initialize[T >: _root_.scala.Nothing <: Panel](size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = Vector((0.until(size).map(((x$1) => Vector())): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$2 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$2)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$3 = processing;
          Nil.$colon$colon(x$3)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$4 = head;
            processing.$colon$colon(x$4)
          })
        else
          {
            <synthetic> val x$6 = processing;
            rec(tail, {
  <synthetic> val x$5 = head;
  Nil.$colon$colon(x$5)
}).$colon$colon(x$6)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$7 = buffer;
          result.$colon$colon(x$7)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$9 = {
            <synthetic> val x$8 = head;
            buffer.$colon$colon(x$8)
          };
          result.$colon$colon(x$9)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$10 = second;
            tail.$colon$colon(x$10)
          }, {
            <synthetic> val x$11 = first;
            buffer.$colon$colon(x$11)
          }, result)
        else
          rec({
            <synthetic> val x$12 = second;
            tail.$colon$colon(x$12)
          }, Nil, {
            <synthetic> val x$14 = {
              <synthetic> val x$13 = first;
              buffer.$colon$colon(x$13)
            };
            result.$colon$colon(x$14)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$15) => segment2(x$15)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$16) => x$16.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    def toIndexMap = GMatch3.toIndexMap(puzzle);
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap = GMatch3.toIndexMap(puzzle)
after
def toIndexMap = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.toIndexMap(puzzle);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$22)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$22)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$17) => x$17.toString)).fold("")(((x$18, x$19) => x$18.$plus(",").$plus(x$19))))).fold("")(((x$20, x$21) => x$20.$plus("\n").$plus(x$21)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.toIndexMap(puzzle);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$22 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$22)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$23) => x$23.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$24) => f(x$24).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$25) => x$25._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$26) => x$26._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$29) => x$29: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$27) => x$27: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$28) => x$28: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$30) => x$30.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$33) => x$33.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[33mwarn[0m] [0m/Users/glyph/Documents/sbt/scalagamerepo/common/src/main/scala/com/glyph/scala/game/action_puzzle/ActionPuzzle.scala:66: a pure expression does nothing in statement position; you may be omitting necessary parentheses[0m
[0m[[33mwarn[0m] [0m    idle(cb)[0m
[0m[[33mwarn[0m] [0m         ^[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanAllWithException(fixedFuture)(3)(((p) => {
  val opt = swiping().get(p);
  if (opt.isDefined)
    opt.get.isEmpty.unary_$bang
  else
    false
}))
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
    val opt = swiping().get(p);
    if (opt.isDefined)
      opt.get.isEmpty.unary_$bang
    else
      false
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$2) => x$2._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
    {
      falling.update(falling().append(filling));
      future.update(fixed().append(falling()));
      val fillingMap = filling.toIndexMap;
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      val futureMap = futureIndices();
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$23._1;
        val y = x$23._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      futureIndexed.$bar$greater(panelAdd)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
      {
        falling.update(falling().append(filling));
        future.update(fixed().append(falling()));
        val fillingMap = filling.toIndexMap;
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        val futureMap = futureIndices();
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$23._1;
          val y = x$23._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        futureIndexed.$bar$greater(panelAdd)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$27._1;
      val fallen = x$27._2;
      fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$27._1;
        val fallen = x$27._2;
        fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$29._1;
    val ty = x$29._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$29._1;
      val ty = x$29._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => MathUtils.random(0, 3).$bar$greater(((x$1) => new AP(x$1))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanAllWithException(fixedFuture)(3)(((p) => {
      val opt = swiping().get(p);
      if (opt.isDefined)
        opt.get.isEmpty.unary_$bang
      else
        false
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$2) => x$2._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => {
  val map = swiping();
  if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(map(a).isEmpty).$amp$amp(map(b).isEmpty))
    a.n.$eq$eq(b.n)
  else
    false
})).filter(((x$3) => x$3.size.$greater(2))).flatten.distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$17 = {
  <synthetic> val x$7 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$6 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$5 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.$colon$colon(x$7)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$8) => WaitAll((x$8: _*))));
  {
  <synthetic> val x$16 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$14 = pa.$minus$greater(swiping().get(pa).map(((x$9) => x$9.filterNot(((x$10) => x$10.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$13 = pb.$minus$greater(swiping().get(pb).map(((x$11) => x$11.filterNot(((x$12) => x$12.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$13)
}.$colon$colon(x$14)
    });
    swiping.update(swiping().filterNot(((x$15) => x$15._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$16)
}.$colon$colon(x$17)
}.$bar$greater(((x$18) => Sequence((x$18: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$20 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$19 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$19)
}.$colon$colon(x$20)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$21) => x$21.isEmpty.unary_$bang)))
        {
          falling.update(falling().append(filling));
          future.update(fixed().append(falling()));
          val fillingMap = filling.toIndexMap;
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = fillingMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          val futureMap = futureIndices();
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$23 = futureMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$23._1;
            val y = x$23._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$24) => x$24: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          futureIndexed.$bar$greater(panelAdd)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping().get(panel).map(((x$25) => x$25.filterNot(((x$26) => x$26.$eq$eq(task))))).$bar(Nil)))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$27 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$27._1;
          val fallen = x$27._2;
          fallen.foreach(((x$28) => x$28.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$29 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$29._1;
        val ty = x$29._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$30) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$31) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$32) => x$32.get(AP.this).map(((x$33) => x$33.isEmpty.unary_$bang)).$bar(false)));
    lazy val isFalling = falling.map(((x$34) => x$34.exists(((x$35) => x$35.contains(AP.this)))));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$36) => x$36.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
[0m[[33mwarn[0m] [0mthere were 2 feature warning(s); re-run with -feature for details[0m
[0m[[33mwarn[0m] [0mtwo warnings found[0m
[0m[[0minfo[0m] [0mRunning com.glyph.Main [0m
[0m[[0minfo[0m] [0m{"screenClass":{"class":"com.glyph.scala.game.action_puzzle.screen.ActionScreen"},"assets":[{"_1":{"class":"com.badlogic.gdx.graphics.Texture"},"_2":["data/dummy.png","data/particle.png","data/sword.png"]},{"_1":{"class":"com.badlogic.gdx.scenes.scene2d.ui.Skin"},"_2":["skin/default.json"]}]}[0m
[0m[[0minfo[0m] [0mspecified resource directory:../common/src/main/resources=>/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources[0m
[0m[[0minfo[0m] [0mstart Memory Analyzer[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mCreated LoadingScreen[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.lib.libgdx.screen.LoadingScreen@56636a77[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)1341000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)13017000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)348000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)1411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)883000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)973000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)19657000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)1875000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)694000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3554000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)4120000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)4233000[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)5388000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)158588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initialize)158662000[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.game.action_puzzle.screen.ActionScreen@4c2df63d[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)18616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11816000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11941000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14434000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12021000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12245000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10921000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10516000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10677000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)19590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9714000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9858000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)22326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)22516000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)21627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)21785000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8120000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5732000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5862000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6001000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5468000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)2563000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)101000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1751000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)130000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)157000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)150000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)67000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)65000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)65000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)163000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)9637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)16359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)381000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)5048000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)347000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)391000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3676000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)45859000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)2654000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)755000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)310000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3761000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1070000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)1156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2791000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)28291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)90793000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)111679000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111764000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)323000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1122000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3078000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1750000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1835000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2463000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)3106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)33649000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)33735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)339000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2477000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)502000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)5098000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2395000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2027000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27788000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)27872000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)381000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1140000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4048000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)909000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)977000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)859000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)20657000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)20735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)401000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1916000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4030000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5040000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)465000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)552000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)294000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)3086000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)13987000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)673000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)314000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)625000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3400000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)380000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)808000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)19526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)38725000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)48080000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)48151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)391000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)953000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5470000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)9932000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)10990000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)405000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)444000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)270000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)259000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2061000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)16748000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)671000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)293000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)281000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2023000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)350000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)37772000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)72995000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)73070000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1183000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)550000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)738000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)451000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1363000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3813000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4754000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)521000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)580000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1094000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6600000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)421000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1998000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)127000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)456000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)740000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)269000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)264000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)10121000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)4398000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)289000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)276000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1950000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)530000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)18363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)33948000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)39458000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)39531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1022000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)109000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3787000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)534000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)594000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)697000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12341000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)407000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1022000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)146000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4016000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1006000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24973000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)420000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1017000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)491000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)553000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)3757000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)450000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)992000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)369000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)489000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)392000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6764000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)414000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1942000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4029000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)479000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)414000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1176000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1460000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5719000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)446000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)768000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3051000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)358000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)961000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1799000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)12660000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)970000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)285000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)238000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2419000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)538000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)28279000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)32964000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)33040000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)386000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)962000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)10381000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)455000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)796000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11844000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)16494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)383000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)969000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)342000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)878000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4028000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5438000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)541000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)824000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6990000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11709000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11783000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)374000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)956000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)129000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)85000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3894000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)444000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9973000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1617000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1743000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1515000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1709000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)25000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1643000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1764000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2002000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1396000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1558000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)954000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2824000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3655000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)432000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)771000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5016000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15912000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15983000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)400000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1118000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)334000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)399000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)377000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)15152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)19298000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)399000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)96000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1047000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)13209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)15484000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)378000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)751000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)16811000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)21481000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)21556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)415000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1031000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2840000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3654000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)337000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)719000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4877000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)422000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1260000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3054000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3882000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)18200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)18319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1856000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)24221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)28274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)442000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)973000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)146000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2911000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3847000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)274000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)698000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4992000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)455000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)977000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)597000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4853000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)487000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1001000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)218000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)85000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)88000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)486000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)527000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)241000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)256000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1754000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6543000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)577000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)241000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)233000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)7457000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)305000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)12622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)23395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26759000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)26826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)398000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1004000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2918000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3663000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)250000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7969000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8041000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)386000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)947000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2747000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3497000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)205000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)263000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7977000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)395000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1342000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)570000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)397000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3945000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4691000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)243000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9468000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)343000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)929000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)81000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)320000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7855000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)337000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)932000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)273000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)484000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)633000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)646000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)998000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3575000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)207000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1001000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9608000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)353000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)930000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3312000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)459000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)526000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)39380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)39449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)355000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)942000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2647000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)187000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14000000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14069000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)430000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1018000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2780000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)551000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)465000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)203000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)303000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)20940000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)603000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)323000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)220000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1958000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)417000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)32191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)35123000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)35197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)573000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)437000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)560000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)729000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)557000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)437000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)558000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)453000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)464000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)437000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)557000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)581000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)705000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)584000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)86949000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)131570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)356000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2172000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4061000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4770000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)224000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)593000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9595000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)346000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)3313000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)161000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)5235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5986000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)468000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)471000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!1[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)22003000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)235000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1854000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)31175000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)637000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)224000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1593000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)340000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)8085000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)45413000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)48116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)48278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)811000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1021000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)817000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1031000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1067000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14033000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)863000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1097000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)799000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)830000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)951000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)799000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)801000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)924000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)313000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)927000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)65000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)310000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)2292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)8000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)227000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)225000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)8179000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)622000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)240000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)231000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1835000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)325000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)21264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24427000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24998000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)942000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)913000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1796000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1932000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)983000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)893000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1027000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)900000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1028000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1207000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)356000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)874000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)799000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)347000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)228000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6847000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)644000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)236000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)213000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2173000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)378000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7854000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)18904000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)28426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)332000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)834000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7778000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7847000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)841000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2933000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)639000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)683000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4465000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)882000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)353000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)761000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7760000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)301000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)943000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2471000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3057000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)330000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)691000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7528000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)298000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)860000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2341000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4080000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)294000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1177000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)114000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3055000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)279000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)334000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)258000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)695000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5697000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)31403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)297000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)703000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1429000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)3755000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6649000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)310000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)641000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)16035000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)995000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1019000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1029000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)944000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1044000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1205000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1487000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1045000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)306000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1498000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)292000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4949000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7597000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7665000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)536000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)971000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)291000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)577000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)309000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2563000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)593000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)376000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)211000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1678000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6342000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)875000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)242000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)222000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1644000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)387000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7377000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)19076000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)21611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)21669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)727000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)716000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)717000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)816000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)817000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)318000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2020000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4093000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)283000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)691000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8849000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8907000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)332000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)805000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2911000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)270000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)769000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)300000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)801000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)100000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2948000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)789000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)302000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)13390000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)774000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)240000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)210000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1518000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)462000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6974000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)23459000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)25887000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)25946000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1903000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2005000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1032000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)874000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)996000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)921000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)832000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)925000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)927000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)808000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1041000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)837000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)776000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)871000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)273000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)794000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2715000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)666000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)302000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)785000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2806000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)303000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)631000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3876000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6808000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)280000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)780000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2864000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)293000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3911000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)308000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)273000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1146000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)304000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)348000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)745000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2725000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)250000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)617000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3721000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)679000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)729000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)293000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)227000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)391000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1721000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6036000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6694000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)238000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)7622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)320000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)734000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)93000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2333000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2907000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)198000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3718000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5586000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)320000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)392000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1167000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)300000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)698000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)200000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)254000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1791000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6001000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)562000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)229000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1417000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)311000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5990000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)15441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)17301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)302000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)755000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)277000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)339000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)225000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1647000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5568000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)559000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)402000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)203000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1450000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)345000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)394000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)14625000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)17006000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17094000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)330000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)770000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2709000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)240000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6337000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)333000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1102000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3050000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3982000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10552000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)205000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)963000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2706000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)229000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)862000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5950000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6007000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)305000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)735000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1941000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)528000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)589000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3792000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)658000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)753000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)577000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)676000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)568000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)682000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)581000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)660000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)552000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)645000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)660000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)292000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)732000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1935000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)209000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)515000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)307000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)717000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)120000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2041000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)190000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3454000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)327000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)730000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1978000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2577000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)90000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)461000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)312000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1245000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3065000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)114000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3721000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)758000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)811000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)95000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)33000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3924000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)325000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)709000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2794000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)15000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)55000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)99000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)190000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)306000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3952000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)246000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)301000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)302000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1534000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)358000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)773000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)54000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)267000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3864000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)41646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)328000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)698000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2388000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2959000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)330000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)902000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)251000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1821000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4897000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)560000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)240000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)208000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1566000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)341000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)388000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5753000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)13726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16732000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)245000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)476000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)191000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)312000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)697000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)110000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)59000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)197000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)324000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)720000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)95000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2970000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)75000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)115000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6963000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)298000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)458000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)491000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)759000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3017000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)304000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)8000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)206000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4459000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)543000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)220000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1414000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)323000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4750000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13034000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13087000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)476000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)500000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)701000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)800000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)495000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)481000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)581000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)593000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)482000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)502000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)494000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)679000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)295000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)285000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)691000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2093000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)179000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)852000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)295000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)760000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)101000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)166000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)464000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3968000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4949000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5088000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)674000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)111000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2702000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14020000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)14120000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)65000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)848000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)18575000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19811000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)19956000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)317000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)689000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)560000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3144000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)63000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)103000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)46000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3758000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4641000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4779000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)544000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)645000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1614000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)86000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)37000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2979000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3825000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)320000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)675000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1733000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)34000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)74000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)508000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)716000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)323000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)709000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1515000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)52000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)765000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)98000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1693000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)53000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2723000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6740000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)93000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)96000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)99000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)96000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)96000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)96000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)93000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)304000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3064000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)4520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)325000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)661000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2052000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)23000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)197000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)192000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4549000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)517000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)217000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)197000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1395000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)336000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)82000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11096000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17981000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)645000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)656000[0m
[0m[[0minfo[0m] [0mtotal heap: 3490kb[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)557000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)628000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)686000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)780000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)548000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)527000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)532000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)628000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)650000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)532000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)283000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)634000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)0[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3761000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)132000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5008000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5865000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5913000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)383000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)28337000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)29444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)30062000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)206000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)30774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)31584000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)309000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)499000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)333000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)182000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3454000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)515000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)203000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)180000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1244000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)315000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)84000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)11383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)16604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)17328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)215000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)491000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1084000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)81000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)109000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)81000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2073000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3463000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)290000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)516000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)85000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)115000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3721000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3766000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)216000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)867000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1298000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)80000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)102000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2734000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2765000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)210000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)829000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1747000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)120000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)144000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3077000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)350000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)370000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)853000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)94000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1867000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2657000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)432000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)424000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)413000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)482000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)432000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)558000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)424000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)491000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)487000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)514000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)454000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)249000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)834000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)91000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2606000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)185000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)404000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1768000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)57000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)79000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)43000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2247000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2877000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)386000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)834000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)68000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)36000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1664000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2258000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)837000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)201000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)33000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)55000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)448000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)23000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1965000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)375000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)434000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)957000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1785000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)194000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)433000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)187000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3358000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1021000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)227000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1235000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)347000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)372000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)25000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10762000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)190000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)289000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1372000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)2690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)270000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)339000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)2740000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)337000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)333000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)197000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)403000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)864000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)189000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)503000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)180000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)185000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3417000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)529000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)199000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)182000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1679000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)338000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)24000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)9112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9696000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)302000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)109000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)193000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)388000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)20000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1595000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3884000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)262000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)110000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)194000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)390000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)843000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)192000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)19000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)185000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3053000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)609000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)204000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)175000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1217000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)301000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)41000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)3900000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)273000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)349000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)281000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)329000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)402000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)187000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)836000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)70000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1665000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)837000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)67000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1856000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)185000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)388000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)895000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)65000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)32000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)281000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)298000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)817000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)893000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)197000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)380000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)877000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)64000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1695000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3003000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3035000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)914000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1855000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)65000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)180000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2822000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)191000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)379000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)34000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)56000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)34000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1033000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2362000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2870000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)193000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)53000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1082000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2860000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2896000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)194000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)404000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)874000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2079000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)198000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)380000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)910000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)18000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1806000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2224000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)384000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)832000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)249000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)1199000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)4164000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)509000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)200000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)192000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1675000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)347000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4892000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10779000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)205000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)453000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)134000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)130000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)224000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)197000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)126000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)197000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)848000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)49000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)20000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2088000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)199000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)838000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)24000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)47000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)17000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2045000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2076000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)198000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)384000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1218000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)22000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)45000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)15000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1995000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2026000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)225000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)571000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1122000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)35000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)115000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)77000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)77000[0m
[0m[[0minfo[0m] [0mpause![0m
java.lang.RuntimeException: Nonzero exit code returned from runner: 255
	at scala.sys.package$.error(package.scala:27)
[0m[[31mtrace[0m] [0mStack trace suppressed: run [34mlast desktop/compile:run[0m for the full output.[0m
[0m[[31merror[0m] [0m(desktop/compile:[31mrun[0m) Nonzero exit code returned from runner: 255[0m
[0m[[31merror[0m] [0mTotal time: 139 s, completed 2013/11/15 20:45:10[0m
