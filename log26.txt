[0m[[0minfo[0m] [0mLoading project definition from /Users/glyph/Documents/sbt/scalagamerepo/project[0m
[0m[[0minfo[0m] [0mSet current project to android (in build file:/Users/glyph/Documents/sbt/scalagamerepo/)[0m
[0m[[0minfo[0m] [0mCompiling 2 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
  final class $anon extends IndexedSeqGen {
    def <init>() = {
      super.<init>();
      ()
    };
    def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
  };
  new $anon()
}))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
    final class $anon extends IndexedSeqGen {
      def <init>() = {
        super.<init>();
        ()
      };
      def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
    };
    new $anon()
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = {
  val cpy = swiping();
  scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
}
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = {
    val cpy = swiping();
    scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$1) => x$1._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$1) => x$1._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = {
  val cpy = swiping();
  GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
}
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = {
    val cpy = swiping();
    GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
    {
      printTime("fill:update failling")(falling.update(falling().append(filling)));
      printTime("fill:update future")(future.update(fixed().append(falling())));
      val fillingMap = filling.toIndexMap;
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$21._1;
        val y = x$21._2;
        scala.Tuple3(p, x, y)
      }));
      val futureMap = futureIndices();
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      panelAdd(futureIndexed)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
      {
        printTime("fill:update failling")(falling.update(falling().append(filling)));
        printTime("fill:update future")(future.update(fixed().append(falling())));
        val fillingMap = filling.toIndexMap;
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$21._1;
          val y = x$21._2;
          scala.Tuple3(p, x, y)
        }));
        val futureMap = futureIndices();
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        panelAdd(futureIndexed)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$25._1;
      val fallen = x$25._2;
      fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$25._1;
        val fallen = x$25._2;
        fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$27._1;
    val ty = x$27._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$27._1;
      val ty = x$27._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging with Timing {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
      final class $anon extends IndexedSeqGen {
        def <init>() = {
          super.<init>();
          ()
        };
        def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
      };
      new $anon()
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  val fallingFlagMap = falling.map(GMatch3.toContainsMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = {
      val cpy = swiping();
      scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$1) => x$1._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = {
      val cpy = swiping();
      GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
        {
          printTime("fill:update failling")(falling.update(falling().append(filling)));
          printTime("fill:update future")(future.update(fixed().append(falling())));
          val fillingMap = filling.toIndexMap;
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$21._1;
            val y = x$21._2;
            scala.Tuple3(p, x, y)
          }));
          val futureMap = futureIndices();
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          panelAdd(futureIndexed)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$25._1;
          val fallen = x$25._2;
          fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$27._1;
        val ty = x$27._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$29) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$30) => x$30(this).isEmpty.unary_$bang));
    lazy val isFalling = fallingFlagMap.map(((x$31) => x$31(this)));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$32) => x$32.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
before
def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)))
after
def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false)
after
def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toContainsMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$1)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$1)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$2 = processing;
      Nil.$colon$colon(x$2)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$3 = head;
        processing.$colon$colon(x$3)
      })
    else
      {
        <synthetic> val x$5 = processing;
        rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$2 = processing;
        Nil.$colon$colon(x$2)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$3 = head;
          processing.$colon$colon(x$3)
        })
      else
        {
          <synthetic> val x$5 = processing;
          rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$6 = buffer;
      result.$colon$colon(x$6)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$8 = {
        <synthetic> val x$7 = head;
        buffer.$colon$colon(x$7)
      };
      result.$colon$colon(x$8)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$9 = second;
        tail.$colon$colon(x$9)
      }, {
        <synthetic> val x$10 = first;
        buffer.$colon$colon(x$10)
      }, result)
    else
      rec({
        <synthetic> val x$11 = second;
        tail.$colon$colon(x$11)
      }, Nil, {
        <synthetic> val x$13 = {
          <synthetic> val x$12 = first;
          buffer.$colon$colon(x$12)
        };
        result.$colon$colon(x$13)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$6 = buffer;
        result.$colon$colon(x$6)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$8 = {
          <synthetic> val x$7 = head;
          buffer.$colon$colon(x$7)
        };
        result.$colon$colon(x$8)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$9 = second;
          tail.$colon$colon(x$9)
        }, {
          <synthetic> val x$10 = first;
          buffer.$colon$colon(x$10)
        }, result)
      else
        rec({
          <synthetic> val x$11 = second;
          tail.$colon$colon(x$11)
        }, Nil, {
          <synthetic> val x$13 = {
            <synthetic> val x$12 = first;
            buffer.$colon$colon(x$12)
          };
          result.$colon$colon(x$13)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  abstract trait IndexedSeqGen extends scala.AnyRef {
    def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T]
  };
  def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toContainsMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$1)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$2 = processing;
          Nil.$colon$colon(x$2)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$3 = head;
            processing.$colon$colon(x$3)
          })
        else
          {
            <synthetic> val x$5 = processing;
            rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$6 = buffer;
          result.$colon$colon(x$6)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$8 = {
            <synthetic> val x$7 = head;
            buffer.$colon$colon(x$7)
          };
          result.$colon$colon(x$8)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$9 = second;
            tail.$colon$colon(x$9)
          }, {
            <synthetic> val x$10 = first;
            buffer.$colon$colon(x$10)
          }, result)
        else
          rec({
            <synthetic> val x$11 = second;
            tail.$colon$colon(x$11)
          }, Nil, {
            <synthetic> val x$13 = {
              <synthetic> val x$12 = first;
              buffer.$colon$colon(x$12)
            };
            result.$colon$colon(x$13)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
    def toIndexMap = GMatch3.toIndexMap(puzzle);
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$21)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap = GMatch3.toIndexMap(puzzle)
after
def toIndexMap = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.toIndexMap(puzzle);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$21)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$21)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.toIndexMap(puzzle);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$21)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[0minfo[0m] [0mCompiling 6 Scala sources to /Users/glyph/Documents/sbt/scalagamerepo/common/target/scala-2.10/classes...[0m
before
def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)))
after
def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = target.forall(sets.contains)
after
def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
  val _$started = System.nanoTime;
  val _$result: Boolean = target.forall(sets.contains);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap
after
def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false)
after
def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = {
  val _$started = System.nanoTime;
  val _$result: Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false);
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,toContainsMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  var matches = {
    <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$1)
  };
  if (x.$less(W))
    {
      val H = puzzle(x).size;
      var current = puzzle(x)(y);
      if (right)
        {
          var nx = x.$plus(1);
          while$1(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  current = puzzle(nx)(y);
                  nx.$plus$eq(1)
                };
                while$1()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          while$2(){
            if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
              {
                {
                  matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  current = puzzle(x)(ny);
                  ny.$plus$eq(1)
                };
                while$2()
              }
            else
              ()
          }
        }
    }
  else
    ();
  matches
}
after
def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    var matches = {
      <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$1)
    };
    if (x.$less(W))
      {
        val H = puzzle(x).size;
        var current = puzzle(x)(y);
        if (right)
          {
            var nx = x.$plus(1);
            while$1(){
              if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                    current = puzzle(nx)(y);
                    nx.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            }
          }
        else
          {
            var ny = y.$plus(1);
            while$2(){
              if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                {
                  {
                    matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                    current = puzzle(x)(ny);
                    ny.$plus$eq(1)
                  };
                  while$2()
                }
              else
                ()
            }
          }
      }
    else
      ();
    matches
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$2 = processing;
      Nil.$colon$colon(x$2)
    }
    case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
      rec(tail, {
        <synthetic> val x$3 = head;
        processing.$colon$colon(x$3)
      })
    else
      {
        <synthetic> val x$5 = processing;
        rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
      }
  };
  rec(line, Nil)
}
after
def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$2 = processing;
        Nil.$colon$colon(x$2)
      }
      case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
        rec(tail, {
          <synthetic> val x$3 = head;
          processing.$colon$colon(x$3)
        })
      else
        {
          <synthetic> val x$5 = processing;
          rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
        }
    };
    rec(line, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
    case Nil => {
      <synthetic> val x$6 = buffer;
      result.$colon$colon(x$6)
    }
    case $colon$colon((head @ _), Nil) => {
      <synthetic> val x$8 = {
        <synthetic> val x$7 = head;
        buffer.$colon$colon(x$7)
      };
      result.$colon$colon(x$8)
    }
    case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
      rec({
        <synthetic> val x$9 = second;
        tail.$colon$colon(x$9)
      }, {
        <synthetic> val x$10 = first;
        buffer.$colon$colon(x$10)
      }, result)
    else
      rec({
        <synthetic> val x$11 = second;
        tail.$colon$colon(x$11)
      }, Nil, {
        <synthetic> val x$13 = {
          <synthetic> val x$12 = first;
          buffer.$colon$colon(x$12)
        };
        result.$colon$colon(x$13)
      })
  };
  rec(line, Nil, Nil)
}
after
def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
      case Nil => {
        <synthetic> val x$6 = buffer;
        result.$colon$colon(x$6)
      }
      case $colon$colon((head @ _), Nil) => {
        <synthetic> val x$8 = {
          <synthetic> val x$7 = head;
          buffer.$colon$colon(x$7)
        };
        result.$colon$colon(x$8)
      }
      case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
        rec({
          <synthetic> val x$9 = second;
          tail.$colon$colon(x$9)
        }, {
          <synthetic> val x$10 = first;
          buffer.$colon$colon(x$10)
        }, result)
      else
        rec({
          <synthetic> val x$11 = second;
          tail.$colon$colon(x$11)
        }, Nil, {
          <synthetic> val x$13 = {
            <synthetic> val x$12 = first;
            buffer.$colon$colon(x$12)
          };
          result.$colon$colon(x$13)
        })
    };
    rec(line, Nil, Nil)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  if (x.$less(W))
    {
      val row = puzzle(x);
      val H = row.size;
      var ny = y;
      while$3(){
        if (ny.$less(height))
          {
            {
              if (ny.$less(H))
                result.$colon$colon$eq(row(ny))
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$3()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y;
      while$4(){
        if (ny.$less(height))
          {
            {
              result.$colon$colon$eq(null.asInstanceOf[T]);
              ny.$plus$eq(1)
            };
            while$4()
          }
        else
          ()
      }
    };
  result
}
after
def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    if (x.$less(W))
      {
        val row = puzzle(x);
        val H = row.size;
        var ny = y;
        while$3(){
          if (ny.$less(height))
            {
              {
                if (ny.$less(H))
                  result.$colon$colon$eq(row(ny))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$3()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y;
        while$4(){
          if (ny.$less(height))
            {
              {
                result.$colon$colon$eq(null.asInstanceOf[T]);
                ny.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        }
      };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val W = puzzle.size;
  var result = List.empty[T];
  var nx = x;
  while$5(){
    if (nx.$less(width))
      {
        {
          if (nx.$less(W))
            {
              val row = puzzle(nx);
              val H = row.size;
              if (y.$less(H))
                result.$colon$colon$eq(row(y))
              else
                result.$colon$colon$eq(null.asInstanceOf[T])
            }
          else
            result.$colon$colon$eq(null.asInstanceOf[T]);
          nx.$plus$eq(1)
        };
        while$5()
      }
    else
      ()
  };
  result
}
after
def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
  val _$started = System.nanoTime;
  val _$result: List[T] = {
    val W = puzzle.size;
    var result = List.empty[T];
    var nx = x;
    while$5(){
      if (nx.$less(width))
        {
          {
            if (nx.$less(W))
              {
                val row = puzzle(nx);
                val H = row.size;
                if (y.$less(H))
                  result.$colon$colon$eq(row(y))
                else
                  result.$colon$colon$eq(null.asInstanceOf[T])
              }
            else
              result.$colon$colon$eq(null.asInstanceOf[T]);
            nx.$plus$eq(1)
          };
          while$5()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  var result: List[List[T]] = Nil;
  var x = 0;
  while$6(){
    if (x.$less(width))
      {
        {
          result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
          x.$plus$eq(1)
        };
        while$6()
      }
    else
      ()
  };
  var y = 0;
  while$7(){
    if (y.$less(height))
      {
        {
          result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
          y.$plus$eq(1)
        };
        while$7()
      }
    else
      ()
  };
  result
}
after
def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
  val _$started = System.nanoTime;
  val _$result: List[List[T]] = {
    var result: List[List[T]] = Nil;
    var x = 0;
    while$6(){
      if (x.$less(width))
        {
          {
            result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
            x.$plus$eq(1)
          };
          while$6()
        }
      else
        ()
    };
    var y = 0;
    while$7(){
      if (y.$less(height))
        {
          {
            result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
            y.$plus$eq(1)
          };
          while$7()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)))
after
def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val result = mutable.ArrayBuffer[MatchedSet[T]]();
  var x = 0;
  val width = puzzle.size;
  while$11(){
    if (x.$less(width))
      {
        {
          var y = 0;
          val height = puzzle(x).size;
          while$10(){
            if (y.$less(height))
              {
                {
                  var vertical = false;
                  var flipCount = 0;
                  while$9(){
                    if (flipCount.$less(2))
                      {
                        {
                          val set = scanner(x)(y)(vertical);
                          var i = 0;
                          val l = result.length;
                          var noNeedToAdd = false;
                          while$8(){
                            if (i.$less(l))
                              {
                                {
                                  val current = result(i);
                                  val inc = included(result(i), set);
                                  noNeedToAdd.$bar$eq(inc);
                                  val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                  if (needReplace)
                                    result.update(i, set)
                                  else
                                    ();
                                  i.$plus$eq(1)
                                };
                                while$8()
                              }
                            else
                              ()
                          };
                          if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                            result.$plus$eq(set)
                          else
                            ();
                          vertical = vertical.unary_$bang;
                          flipCount.$plus$eq(1)
                        };
                        while$9()
                      }
                    else
                      ()
                  };
                  y.$plus$eq(1)
                };
                while$10()
              }
            else
              ()
          };
          x.$plus$eq(1)
        };
        while$11()
      }
    else
      ()
  };
  result
}
after
def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[MatchedSet[T]] = {
    val result = mutable.ArrayBuffer[MatchedSet[T]]();
    var x = 0;
    val width = puzzle.size;
    while$11(){
      if (x.$less(width))
        {
          {
            var y = 0;
            val height = puzzle(x).size;
            while$10(){
              if (y.$less(height))
                {
                  {
                    var vertical = false;
                    var flipCount = 0;
                    while$9(){
                      if (flipCount.$less(2))
                        {
                          {
                            val set = scanner(x)(y)(vertical);
                            var i = 0;
                            val l = result.length;
                            var noNeedToAdd = false;
                            while$8(){
                              if (i.$less(l))
                                {
                                  {
                                    val current = result(i);
                                    val inc = included(result(i), set);
                                    noNeedToAdd.$bar$eq(inc);
                                    val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                    if (needReplace)
                                      result.update(i, set)
                                    else
                                      ();
                                    i.$plus$eq(1)
                                  };
                                  while$8()
                                }
                              else
                                ()
                            };
                            if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                              result.$plus$eq(set)
                            else
                              ();
                            vertical = vertical.unary_$bang;
                            flipCount.$plus$eq(1)
                          };
                          while$9()
                        }
                      else
                        ()
                    };
                    y.$plus$eq(1)
                  };
                  while$10()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$11()
        }
      else
        ()
    };
    result
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))))
after
def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))))
after
def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)))
after
def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val appended = left.append(floatings);
  floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
}
after
def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
  val _$started = System.nanoTime;
  val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val appended = left.append(floatings);
    floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
object GMatch3 extends scala.AnyRef {
  def <init>() = {
    super.<init>();
    ()
  };
  import scala.util.control.Exception._;
  abstract trait Panel extends scala.AnyRef {
    def matchTo(panel: Panel): Boolean
  };
  type Event[T >: _root_.scala.Nothing <: Panel] = scala.Tuple3[T, Int, Int];
  type MatchedSet[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Events[T >: _root_.scala.Nothing <: Panel] = Seq[Event[T]];
  type Puzzle[T >: _root_.scala.Nothing <: Panel] = IndexedSeq[IndexedSeq[T]];
  abstract trait IndexedSeqGen extends scala.AnyRef {
    def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T]
  };
  def initialize[T >: _root_.scala.Nothing <: Panel](width: Int)(c: IndexedSeqGen): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = c.convert(0.until(width).toList.as(c.convert(Nil)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def included[T >: _root_.scala.Nothing <: Panel](sets: MatchedSet[T], target: MatchedSet[T]): Boolean = {
    val _$started = System.nanoTime;
    val _$result: Boolean = target.forall(sets.contains);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,included)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, scala.Tuple2[Int, Int]] = puzzle.zipWithIndex.flatMap(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => p.$minus$greater(x, y)
  })
}).toMap;
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toContainsMap[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]]): Map[T, Boolean] = {
    val _$started = System.nanoTime;
    val _$result: Map[T, Boolean] = puzzle.flatMap(((row) => row.map(((p) => p.$minus$greater(true))))).toMap.withDefaultValue(false);
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,toContainsMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanIndexedWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(x: Int)(y: Int)(exception: _root_.scala.Function1[T, Boolean])(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      var matches = {
        <synthetic> val x$1 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$1)
      };
      if (x.$less(W))
        {
          val H = puzzle(x).size;
          var current = puzzle(x)(y);
          if (right)
            {
              var nx = x.$plus(1);
              while$1(){
                if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(current.matchTo(puzzle(nx)(y))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(nx)(y), nx, y);
                      current = puzzle(nx)(y);
                      nx.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              }
            }
          else
            {
              var ny = y.$plus(1);
              while$2(){
                if (ny.$less(H).$amp$amp(current.matchTo(puzzle(x)(ny))).$amp$amp(exception(current).unary_$bang))
                  {
                    {
                      matches.$colon$colon$eq(puzzle(x)(ny), x, ny);
                      current = puzzle(x)(ny);
                      ny.$plus$eq(1)
                    };
                    while$2()
                  }
                else
                  ()
              }
            }
        }
      else
        ();
      matches
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanIndexedWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(divider: _root_.scala.Function1[T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      def rec(seq: List[T], processing: List[T]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$2 = processing;
          Nil.$colon$colon(x$2)
        }
        case $colon$colon((head @ _), (tail @ _)) => if (divider(head))
          rec(tail, {
            <synthetic> val x$3 = head;
            processing.$colon$colon(x$3)
          })
        else
          {
            <synthetic> val x$5 = processing;
            rec(tail, {
  <synthetic> val x$4 = head;
  Nil.$colon$colon(x$4)
}).$colon$colon(x$5)
          }
      };
      rec(line, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def segment2[T >: _root_.scala.Nothing <: _root_.scala.Any](line: List[T])(filter: _root_.scala.Function2[T, T, Boolean]): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      @new tailrec() def rec(seq: List[T], buffer: List[T], result: List[List[T]]): List[List[T]] = seq match {
        case Nil => {
          <synthetic> val x$6 = buffer;
          result.$colon$colon(x$6)
        }
        case $colon$colon((head @ _), Nil) => {
          <synthetic> val x$8 = {
            <synthetic> val x$7 = head;
            buffer.$colon$colon(x$7)
          };
          result.$colon$colon(x$8)
        }
        case $colon$colon((first @ _), $colon$colon((second @ _), (tail @ _))) => if (filter(first, second))
          rec({
            <synthetic> val x$9 = second;
            tail.$colon$colon(x$9)
          }, {
            <synthetic> val x$10 = first;
            buffer.$colon$colon(x$10)
          }, result)
        else
          rec({
            <synthetic> val x$11 = second;
            tail.$colon$colon(x$11)
          }, Nil, {
            <synthetic> val x$13 = {
              <synthetic> val x$12 = first;
              buffer.$colon$colon(x$12)
            };
            result.$colon$colon(x$13)
          })
      };
      rec(line, Nil, Nil)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,segment2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def verticalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(height: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      if (x.$less(W))
        {
          val row = puzzle(x);
          val H = row.size;
          var ny = y;
          while$3(){
            if (ny.$less(height))
              {
                {
                  if (ny.$less(H))
                    result.$colon$colon$eq(row(ny))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$3()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y;
          while$4(){
            if (ny.$less(height))
              {
                {
                  result.$colon$colon$eq(null.asInstanceOf[T]);
                  ny.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          }
        };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,verticalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def horizontalLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(x: Int)(y: Int)(width: Int): List[T] = {
    val _$started = System.nanoTime;
    val _$result: List[T] = {
      val W = puzzle.size;
      var result = List.empty[T];
      var nx = x;
      while$5(){
        if (nx.$less(width))
          {
            {
              if (nx.$less(W))
                {
                  val row = puzzle(nx);
                  val H = row.size;
                  if (y.$less(H))
                    result.$colon$colon$eq(row(y))
                  else
                    result.$colon$colon$eq(null.asInstanceOf[T])
                }
              else
                result.$colon$colon$eq(null.asInstanceOf[T]);
              nx.$plus$eq(1)
            };
            while$5()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,horizontalLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def allLine[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int): List[List[T]] = {
    val _$started = System.nanoTime;
    val _$result: List[List[T]] = {
      var result: List[List[T]] = Nil;
      var x = 0;
      while$6(){
        if (x.$less(width))
          {
            {
              result.$colon$colon$eq(verticalLine(puzzle)(x)(0)(height));
              x.$plus$eq(1)
            };
            while$6()
          }
        else
          ()
      };
      var y = 0;
      while$7(){
        if (y.$less(height))
          {
            {
              result.$colon$colon$eq(horizontalLine(puzzle)(0)(y)(width));
              y.$plus$eq(1)
            };
            while$7()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,allLine)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll[T >: _root_.scala.Nothing <: _root_.scala.Any](puzzle: IndexedSeq[IndexedSeq[T]])(width: Int)(height: Int)(filter: _root_.scala.Function2[T, T, Boolean]): Seq[Seq[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[Seq[T]] = allLine(puzzle)(width)(height).flatMap(((x$14) => segment2(x$14)(filter)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(scanner: _root_.scala.Function1[Int, _root_.scala.Function1[Int, _root_.scala.Function1[Boolean, MatchedSet[T]]]]): Seq[MatchedSet[T]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[MatchedSet[T]] = {
      val result = mutable.ArrayBuffer[MatchedSet[T]]();
      var x = 0;
      val width = puzzle.size;
      while$11(){
        if (x.$less(width))
          {
            {
              var y = 0;
              val height = puzzle(x).size;
              while$10(){
                if (y.$less(height))
                  {
                    {
                      var vertical = false;
                      var flipCount = 0;
                      while$9(){
                        if (flipCount.$less(2))
                          {
                            {
                              val set = scanner(x)(y)(vertical);
                              var i = 0;
                              val l = result.length;
                              var noNeedToAdd = false;
                              while$8(){
                                if (i.$less(l))
                                  {
                                    {
                                      val current = result(i);
                                      val inc = included(result(i), set);
                                      noNeedToAdd.$bar$eq(inc);
                                      val needReplace = current.size.$less(set.size).$amp$amp(inc);
                                      if (needReplace)
                                        result.update(i, set)
                                      else
                                        ();
                                      i.$plus$eq(1)
                                    };
                                    while$8()
                                  }
                                else
                                  ()
                              };
                              if (noNeedToAdd.unary_$bang.$amp$amp(set.$bang$eq(Nil)))
                                result.$plus$eq(set)
                              else
                                ();
                              vertical = vertical.unary_$bang;
                              flipCount.$plus$eq(1)
                            };
                            while$9()
                          }
                        else
                          ()
                      };
                      y.$plus$eq(1)
                    };
                    while$10()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$11()
          }
        else
          ()
      };
      result
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = 0.until(puzzle.size).flatMap(((x) => puzzle(x).size.until(col).map(((y) => scala.Tuple3(seed(), x, y)))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(seed: _root_.scala.Function0[T], col: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = 0.until(puzzle.size).map(((x) => puzzle(x).size.until(col).map(((y) => seed()))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException[T >: _root_.scala.Nothing <: Panel](puzzle: Puzzle[T])(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(puzzle)(((x) => ((y) => ((right) => scanIndexedWithException(puzzle)(x)(y)(exception)(right))))).filter(((x$15) => x$15.length.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  @new hello() implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
    <paramaccessor> val puzzle: Puzzle[T] = _;
    def <init>(puzzle: Puzzle[T]) = {
      super.<init>();
      ()
    };
    def text: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
    def toIndexMap = GMatch3.toIndexMap(puzzle);
    def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$21)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>));
    def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
    def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>));
    def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
    def scanAll = scanBy(scan);
    def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    })
  };
  def calcNextIndices[T >: _root_.scala.Nothing <: Panel](left: Puzzle[T])(floatings: Puzzle[T]): Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
    val _$started = System.nanoTime;
    val _$result: Seq[scala.Tuple2[T, scala.Tuple2[Int, Int]]] = {
      val appended = left.append(floatings);
      floatings.flatten.map(((p) => scala.Tuple2(p, appended.indexOfPanelUnhandled(p))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(GMatch3,calcNextIndices)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
before
def <init>(puzzle: Puzzle[T]) = {
  super.<init>();
  ()
}
after
def <init>(puzzle: Puzzle[T]) = {
  val _$started = System.nanoTime;
  val _$result = {
    super.<init>();
    ()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def text: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)))
after
def text: String = {
  val _$started = System.nanoTime;
  val _$result: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def toIndexMap = GMatch3.toIndexMap(puzzle)
after
def toIndexMap = {
  val _$started = System.nanoTime;
  val _$result = GMatch3.toIndexMap(puzzle);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanWithException = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>))
after
def scanWithException = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val W = puzzle.size;
  val H = puzzle.head.size;
  val panel = puzzle(x)(y);
  var matching = {
    <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
    Nil.$colon$colon(x$21)
  };
  if (right)
    {
      var nx = x.$plus(1);
      while$12(){
        if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
          {
            {
              matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
              nx.$plus$eq(1)
            };
            while$12()
          }
        else
          ()
      }
    }
  else
    {
      var ny = y.$plus(1);
      val size = puzzle(x).size;
      while$13(){
        if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
          {
            {
              matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
              ny.$plus$eq(1)
            };
            while$13()
          }
        else
          ()
      }
    };
  if (matching.size.$greater$eq(3))
    matching
  else
    Nil
}
after
def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
  val _$started = System.nanoTime;
  val _$result: MatchedSet[T] = {
    val W = puzzle.size;
    val H = puzzle.head.size;
    val panel = puzzle(x)(y);
    var matching = {
      <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
      Nil.$colon$colon(x$21)
    };
    if (right)
      {
        var nx = x.$plus(1);
        while$12(){
          if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
            {
              {
                matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                nx.$plus$eq(1)
              };
              while$12()
            }
          else
            ()
        }
      }
    else
      {
        var ny = y.$plus(1);
        val size = puzzle(x).size;
        while$13(){
          if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
            {
              {
                matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                ny.$plus$eq(1)
              };
              while$13()
            }
          else
            ()
        }
      };
    if (matching.size.$greater$eq(3))
      matching
    else
      Nil
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFilling = (GMatch3.createFilling(puzzle): (() => <empty>))
after
def createFilling = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createFillingPuzzle = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>))
after
def createFillingPuzzle = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(filling: Events[T]): Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
  case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
})
after
def fill(filling: Events[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
    case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def removePanels(panels: Seq[T]): Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)))
after
def removePanels(panels: Seq[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val f = ((p: Panel) => panels.contains(p));
  puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
    case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
  }))
}
after
def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val f = ((p: Panel) => panels.contains(p));
    puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
      case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val contains = (puzzle.flatten.contains: (() => <empty>));
  @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
    case (filling @ _) => added.fill(filling) match {
      case (filled @ _) => filled.scanAll match {
        case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
        case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
      }
    }
  };
  fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
    case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
      case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
    }))
  }))
}
after
def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
  val _$started = System.nanoTime;
  val _$result: Events[T] = {
    val contains = (puzzle.flatten.contains: (() => <empty>));
    @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
      case (filling @ _) => added.fill(filling) match {
        case (filled @ _) => filled.scanAll match {
          case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
          case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
        }
      }
    };
    fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
      case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
        case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
      }))
    }))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
    case Seq() => p
    case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
      case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
    })))
  };
  recFWM(puzzle)
}
after
private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
      case Seq() => p
      case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
        case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
      })))
    };
    recFWM(puzzle)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanBy = (GMatch3.scanBy(puzzle): (() => <empty>))
after
def scanBy = {
  val _$started = System.nanoTime;
  val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)))
after
def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
  val _$started = System.nanoTime;
  val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = scanBy(scan)
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = scanBy(scan);
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
  val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
    val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = allCatch.opt({
  val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
})
after
def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
  val _$started = System.nanoTime;
  val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
    val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
  scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
}
after
def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
  val _$started = System.nanoTime;
  val _$result: scala.Tuple2[Int, Int] = {
    val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
    scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val a = puzzle(ax)(ay);
  val b = puzzle(bx)(by);
  val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
  val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
  puzzle2
}
after
def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = {
    val a = puzzle(ax)(ay);
    val b = puzzle(bx)(by);
    val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
    val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
    puzzle2
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def append(p: Puzzle[T]): Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
  case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
})
after
def append(p: Puzzle[T]): Puzzle[T] = {
  val _$started = System.nanoTime;
  val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
    case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
implicit class PuzzleImpl[T >: _root_.scala.Nothing <: Panel] extends AnyVal {
  <paramaccessor> val puzzle: Puzzle[T] = _;
  def <init>(puzzle: Puzzle[T]) = {
    val _$started = System.nanoTime;
    val _$result = {
      super.<init>();
      ()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,<init>)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def text: String = {
    val _$started = System.nanoTime;
    val _$result: String = puzzle.map(((col) => col.map(((x$16) => x$16.toString)).fold("")(((x$17, x$18) => x$17.$plus(",").$plus(x$18))))).fold("")(((x$19, x$20) => x$19.$plus("\n").$plus(x$20)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,text)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def toIndexMap = {
    val _$started = System.nanoTime;
    val _$result = GMatch3.toIndexMap(puzzle);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,toIndexMap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanWithException = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanIndexedWithException(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scan(x: Int)(y: Int)(right: Boolean): MatchedSet[T] = {
    val _$started = System.nanoTime;
    val _$result: MatchedSet[T] = {
      val W = puzzle.size;
      val H = puzzle.head.size;
      val panel = puzzle(x)(y);
      var matching = {
        <synthetic> val x$21 = scala.Tuple3(puzzle(x)(y), x, y);
        Nil.$colon$colon(x$21)
      };
      if (right)
        {
          var nx = x.$plus(1);
          while$12(){
            if (nx.$less(W).$amp$amp(y.$less(puzzle(nx).size)).$amp$amp(panel.matchTo(puzzle(nx)(y))))
              {
                {
                  matching.$colon$colon$eq(puzzle(nx)(y), nx, y);
                  nx.$plus$eq(1)
                };
                while$12()
              }
            else
              ()
          }
        }
      else
        {
          var ny = y.$plus(1);
          val size = puzzle(x).size;
          while$13(){
            if (ny.$less(H).$amp$amp(ny.$less(size)).$amp$amp(panel.matchTo(puzzle(x)(ny))))
              {
                {
                  matching.$colon$colon$eq(puzzle(x)(ny), x, ny);
                  ny.$plus$eq(1)
                };
                while$13()
              }
            else
              ()
          }
        };
      if (matching.size.$greater$eq(3))
        matching
      else
        Nil
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scan)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFilling = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFilling(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createFillingPuzzle = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.createFillingPuzzle(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createFillingPuzzle)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(filling: Events[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = filling.foldLeft(puzzle)(<empty> match {
      case scala.Tuple2((p @ _), scala.Tuple3((panel @ _), (x @ _), _)) => p.updated(x, p(x).$colon$plus(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def removePanels(panels: Seq[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.map(((x$22) => x$22.filterNot(panels.contains)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,removePanels)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[T]): scala.Tuple2[Puzzle[T], Puzzle[T]] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Puzzle[T], Puzzle[T]] = {
      val f = ((p: Panel) => panels.contains(p));
      puzzle.unzip(((col) => col.span(((x$23) => f(x$23).unary_$bang)) match {
        case scala.Tuple2((left @ _), (float @ _)) => scala.Tuple2(left, float.filterNot(f))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def createNoMatchFilling(seed: _root_.scala.Function0[T], col: Int): Events[T] = {
    val _$started = System.nanoTime;
    val _$result: Events[T] = {
      val contains = (puzzle.flatten.contains: (() => <empty>));
      @new tailrec() def fillWithStatics(added: Puzzle[T]): Puzzle[T] = added.createFilling(seed, col) match {
        case (filling @ _) => added.fill(filling) match {
          case (filled @ _) => filled.scanAll match {
            case (matches @ _) if matches.flatten.map(((x$24) => x$24._1)).forall(contains) => filled
            case (matches @ _) => fillWithStatics(added.removePanels(filling.filterNot(puzzle.flatten.contains).map(((x$25) => x$25._1))))
          }
        }
      };
      fillWithStatics(puzzle).zipWithIndex.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple2((col @ _), (x @ _)) => true
  case _ => false
})).flatMap(((x$28) => x$28: @scala.unchecked match {
        case scala.Tuple2((col @ _), (x @ _)) => col.zipWithIndex.withFilter(((check$ifrefutable$2) => check$ifrefutable$2: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => true
  case _ => false
})).withFilter(((x$26) => x$26: @scala.unchecked match {
  case scala.Tuple2((panel @ _), (y @ _)) => puzzle(x).contains(panel).unary_$bang
})).map(((x$27) => x$27: @scala.unchecked match {
          case scala.Tuple2((panel @ _), (y @ _)) => scala.Tuple3(panel, x, y)
        }))
      }))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,createNoMatchFilling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  private def fillWithoutMatches(seed: _root_.scala.Function0[T], size: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      @new tailrec() def recFWM(p: Puzzle[T]): Puzzle[T] = p.scanAll match {
        case Seq() => p
        case (matches @ _) => recFWM(removePanels(matches.flatten.distinct.map(<empty> match {
          case scala.Tuple3((pp @ _), (x @ _), (y @ _)) => pp
        })))
      };
      recFWM(puzzle)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,fillWithoutMatches)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanBy = {
    val _$started = System.nanoTime;
    val _$result = (GMatch3.scanBy(puzzle): (() => <empty>));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanBy)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllWithException(matchLength: Int)(exception: _root_.scala.Function1[T, Boolean]) = {
    val _$started = System.nanoTime;
    val _$result = scanBy(((x) => ((y) => ((right) => scanWithException(x)(y)(exception)(right))))).filter(((x$29) => x$29.size.$greater$eq(matchLength)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAllWithException)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = scanBy(scan);
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanel(panel: T): Either[Throwable, scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Either[Throwable, scala.Tuple2[Int, Int]] = allCatch.either({
      val row = puzzle.filter(((x$30) => x$30.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanel)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelOpt(panel: T): Option[scala.Tuple2[Int, Int]] = {
    val _$started = System.nanoTime;
    val _$result: Option[scala.Tuple2[Int, Int]] = allCatch.opt({
      val row = puzzle.filter(((x$31) => x$31.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelOpt)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def indexOfPanelUnhandled(panel: Panel): scala.Tuple2[Int, Int] = {
    val _$started = System.nanoTime;
    val _$result: scala.Tuple2[Int, Int] = {
      val row = puzzle.filter(((x$32) => x$32.contains(panel))).head;
      scala.Tuple2(puzzle.indexOf(row), row.indexOf(panel))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,indexOfPanelUnhandled)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swap(ax: Int, ay: Int, bx: Int, by: Int): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = {
      val a = puzzle(ax)(ay);
      val b = puzzle(bx)(by);
      val puzzle1 = puzzle.updated(ax, puzzle(ax).updated(ay, b));
      val puzzle2 = puzzle1.updated(bx, puzzle1(bx).updated(by, a));
      puzzle2
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,swap)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def append(p: Puzzle[T]): Puzzle[T] = {
    val _$started = System.nanoTime;
    val _$result: Puzzle[T] = puzzle.zipWithIndex.map(<empty> match {
      case scala.Tuple2((col @ _), (x @ _)) => col.$plus$plus(p(x))
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(PuzzleImpl,append)".$plus(_$finished.$minus(_$started)));
    _$result
  }
}
[0m[[33mwarn[0m] [0m/Users/glyph/Documents/sbt/scalagamerepo/common/src/main/scala/com/glyph/scala/game/action_puzzle/ActionPuzzle.scala:66: a pure expression does nothing in statement position; you may be omitting necessary parentheses[0m
[0m[[33mwarn[0m] [0m    idle(cb)[0m
[0m[[33mwarn[0m] [0m         ^[0m
before
def initializer: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
  final class $anon extends IndexedSeqGen {
    def <init>() = {
      super.<init>();
      ()
    };
    def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
  };
  new $anon()
}))
after
def initializer: Var[Puzzle[AP]] = {
  val _$started = System.nanoTime;
  val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
    final class $anon extends IndexedSeqGen {
      def <init>() = {
        super.<init>();
        ()
      };
      def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
    };
    new $anon()
  }));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def seed: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)))
after
def seed: _root_.scala.Function0[AP] = {
  val _$started = System.nanoTime;
  val _$result: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAll = {
  val cpy = swiping();
  scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
}
after
def scanAll = {
  val _$started = System.nanoTime;
  val _$result = {
    val cpy = swiping();
    scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct = scanAll.flatten.map(((x$1) => x$1._1)).distinct
after
def scanAllDistinct = {
  val _$started = System.nanoTime;
  val _$result = scanAll.flatten.map(((x$1) => x$1._1)).distinct;
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanAllDistinct2 = {
  val cpy = swiping();
  GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
}
after
def scanAllDistinct2 = {
  val _$started = System.nanoTime;
  val _$result = {
    val cpy = swiping();
    GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fixedFuture = fixed().zipWithIndex.map(<empty> match {
  case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
    case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
  })
})
after
def fixedFuture = {
  val _$started = System.nanoTime;
  val _$result = fixed().zipWithIndex.map(<empty> match {
    case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
      case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
    })
  });
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def scanRemoveFill(): scala.Unit = {
  remove(scanAllDistinct2);
  fill()
}
after
def scanRemoveFill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    remove(scanAllDistinct2);
    fill()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def swipe(x: Int, y: Int, nx: Int, ny: Int) = try {
  def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
  if (verified)
    {
      val pa = future()(x)(y);
      val pb = future()(nx)(ny);
      import Animator._;
      import Interpolation._;
      var pTask: Task = null;
      val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
      pTask = task;
      swiping().$plus$plus$eq({
        <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
        {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
      });
      future.update(future().swap(x, y, nx, ny));
      processor.add(task)
    }
  else
    ()
} catch {
  case (e @ (_: Exception)) => e.printStackTrace()
}
after
def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
  val _$started = System.nanoTime;
  val _$result = try {
    def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
    if (verified)
      {
        val pa = future()(x)(y);
        val pb = future()(nx)(ny);
        import Animator._;
        import Interpolation._;
        var pTask: Task = null;
        val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
        pTask = task;
        swiping().$plus$plus$eq({
          <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
          {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
        });
        future.update(future().swap(x, y, nx, ny));
        processor.add(task)
      }
    else
      ()
  } catch {
    case (e @ (_: Exception)) => e.printStackTrace()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def fill(): scala.Unit = {
  val filling = future().createFillingPuzzle(seed, COLUMN);
  if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
    {
      printTime("fill:update failling")(falling.update(falling().append(filling)));
      printTime("fill:update future")(future.update(fixed().append(falling())));
      val fillingMap = filling.toIndexMap;
      val indexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$21._1;
        val y = x$21._2;
        scala.Tuple3(p, x, y)
      }));
      val futureMap = futureIndices();
      val futureIndexed = filling.flatten.map(((p) => {
        <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
          case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
        };
        val x = x$22._1;
        val y = x$22._2;
        scala.Tuple3(p, x, y)
      }));
      indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
        case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
          p.x.update(x);
          p.y.update(COLUMN.$plus(y))
        }
      }));
      panelAdd(futureIndexed)
    }
  else
    ();
  updateTargetPosition()
}
after
def fill(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val filling = future().createFillingPuzzle(seed, COLUMN);
    if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
      {
        printTime("fill:update failling")(falling.update(falling().append(filling)));
        printTime("fill:update future")(future.update(fixed().append(falling())));
        val fillingMap = filling.toIndexMap;
        val indexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$21._1;
          val y = x$21._2;
          scala.Tuple3(p, x, y)
        }));
        val futureMap = futureIndices();
        val futureIndexed = filling.flatten.map(((p) => {
          <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
            case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
          };
          val x = x$22._1;
          val y = x$22._2;
          scala.Tuple3(p, x, y)
        }));
        indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
          case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
            p.x.update(x);
            p.y.update(COLUMN.$plus(y))
          }
        }));
        panelAdd(futureIndexed)
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def cancelSwipingAnimation(panel: AP): scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
  log("canceled!".$plus(panel));
  swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
}))))
after
def cancelSwipingAnimation(panel: AP): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
    log("canceled!".$plus(panel));
    swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
  }))));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def remove(panels: Seq[AP]): scala.Unit = {
  if (panels.isEmpty.unary_$bang)
    {
      <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
        case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
      };
      val left = x$25._1;
      val fallen = x$25._2;
      fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
      panelRemove(panels);
      fixed.update(left);
      falling.update(fallen.append(falling()));
      future.update(fixed().append(falling()))
    }
  else
    ();
  updateTargetPosition()
}
after
def remove(panels: Seq[AP]): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    if (panels.isEmpty.unary_$bang)
      {
        <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
          case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
        };
        val left = x$25._1;
        val fallen = x$25._2;
        fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
        panelRemove(panels);
        fixed.update(left);
        falling.update(fallen.append(falling()));
        future.update(fixed().append(falling()))
      }
    else
      ();
    updateTargetPosition()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateTargetPosition(): scala.Unit = {
  val indices = futureIndices();
  falling().foreach(((row) => row.foreach(((p) => {
    <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
      case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
    };
    val tx = x$27._1;
    val ty = x$27._2;
    p.tx.update(tx);
    p.ty.update(ty)
  }))))
}
after
def updateTargetPosition(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    val indices = futureIndices();
    falling().foreach(((row) => row.foreach(((p) => {
      <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
        case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
      };
      val tx = x$27._1;
      val ty = x$27._2;
      p.tx.update(tx);
      p.ty.update(ty)
    }))))
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def initialize(): scala.Unit = fill()
after
def initialize(): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = fill();
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def update(delta: Float): scala.Unit = {
  updateFalling(delta);
  processor.update(delta)
}
after
def update(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    updateFalling(delta);
    processor.update(delta)
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*))
after
def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
  val _$started = System.nanoTime;
  val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*));
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
  _$result
}
before
def updateFalling(delta: Float): scala.Unit = {
  {
    val fallingCpy = falling();
    val width = fallingCpy.size;
    var x = 0;
    while$2(){
      if (x.$less(width))
        {
          {
            val applied = fallingCpy(x);
            val height = applied.size;
            var y = 0;
            while$1(){
              if (y.$less(height))
                {
                  {
                    val p = applied(y);
                    p.vy().$plus$eq(gravity.$times(delta));
                    if (p.update(delta))
                      finishedBuf.$plus$eq(p)
                    else
                      continuedBuf(x).$plus$eq(p);
                    y.$plus$eq(1)
                  };
                  while$1()
                }
              else
                ()
            };
            x.$plus$eq(1)
          };
          while$2()
        }
      else
        ()
    }
  };
  if (finishedBuf.isEmpty.unary_$bang)
    {
      {
        var x = 0;
        while$4(){
          if (x.$less(ROW))
            {
              {
                val row = fallingBuffer(x);
                row.clear();
                var y = 0;
                val conRow = continuedBuf(x);
                val height = conRow.size;
                while$3(){
                  if (y.$less(height))
                    {
                      {
                        row.$plus$eq(conRow(y));
                        y.$plus$eq(1)
                      };
                      while$3()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$4()
            }
          else
            ()
        };
        falling.update(fallingBuffer)
      };
      {
        var x = 0;
        while$7(){
          if (x.$less(ROW))
            {
              {
                val row = fixed()(x);
                val length = row.size;
                val buf = fixedBuf(x);
                fixedTemp.clear();
                var y = 0;
                while$5(){
                  if (y.$less(length))
                    {
                      {
                        fixedTemp.push(row(y));
                        y.$plus$eq(1)
                      };
                      while$5()
                    }
                  else
                    ()
                };
                buf.clear();
                while$6(){
                  if (fixedTemp.isEmpty.unary_$bang)
                    {
                      buf.$plus$eq(fixedTemp.pop());
                      while$6()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$7()
            }
          else
            ()
        }
      };
      finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
      fixed.update(fixedBuf);
      scanRemoveFill()
    }
  else
    ();
  var i = 0;
  while$8(){
    if (i.$less(ROW))
      {
        {
          continuedBuf(i).clear();
          i.$plus$eq(1)
        };
        while$8()
      }
    else
      ()
  };
  finishedBuf.clear()
}
after
def updateFalling(delta: Float): scala.Unit = {
  val _$started = System.nanoTime;
  val _$result: scala.Unit = {
    {
      val fallingCpy = falling();
      val width = fallingCpy.size;
      var x = 0;
      while$2(){
        if (x.$less(width))
          {
            {
              val applied = fallingCpy(x);
              val height = applied.size;
              var y = 0;
              while$1(){
                if (y.$less(height))
                  {
                    {
                      val p = applied(y);
                      p.vy().$plus$eq(gravity.$times(delta));
                      if (p.update(delta))
                        finishedBuf.$plus$eq(p)
                      else
                        continuedBuf(x).$plus$eq(p);
                      y.$plus$eq(1)
                    };
                    while$1()
                  }
                else
                  ()
              };
              x.$plus$eq(1)
            };
            while$2()
          }
        else
          ()
      }
    };
    if (finishedBuf.isEmpty.unary_$bang)
      {
        {
          var x = 0;
          while$4(){
            if (x.$less(ROW))
              {
                {
                  val row = fallingBuffer(x);
                  row.clear();
                  var y = 0;
                  val conRow = continuedBuf(x);
                  val height = conRow.size;
                  while$3(){
                    if (y.$less(height))
                      {
                        {
                          row.$plus$eq(conRow(y));
                          y.$plus$eq(1)
                        };
                        while$3()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$4()
              }
            else
              ()
          };
          falling.update(fallingBuffer)
        };
        {
          var x = 0;
          while$7(){
            if (x.$less(ROW))
              {
                {
                  val row = fixed()(x);
                  val length = row.size;
                  val buf = fixedBuf(x);
                  fixedTemp.clear();
                  var y = 0;
                  while$5(){
                    if (y.$less(length))
                      {
                        {
                          fixedTemp.push(row(y));
                          y.$plus$eq(1)
                        };
                        while$5()
                      }
                    else
                      ()
                  };
                  buf.clear();
                  while$6(){
                    if (fixedTemp.isEmpty.unary_$bang)
                      {
                        buf.$plus$eq(fixedTemp.pop());
                        while$6()
                      }
                    else
                      ()
                  };
                  x.$plus$eq(1)
                };
                while$7()
              }
            else
              ()
          }
        };
        finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
        fixed.update(fixedBuf);
        scanRemoveFill()
      }
    else
      ();
    var i = 0;
    while$8(){
      if (i.$less(ROW))
        {
          {
            continuedBuf(i).clear();
            i.$plus$eq(1)
          };
          while$8()
        }
      else
        ()
    };
    finishedBuf.clear()
  };
  val _$finished = System.nanoTime;
  scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
  _$result
}
result:
class ActionPuzzle3 extends Reactor with Logging with Timing {
  def <init>() = {
    super.<init>();
    ()
  };
  import GMatch3._;
  val ROW = 8;
  val COLUMN = 8;
  val gravity = -10.0;
  val processor = {
    final class $anon extends ParallelProcessor {
      def <init>() = {
        super.<init>();
        ()
      }
    };
    new $anon()
  };
  def initializer: Var[Puzzle[AP]] = {
    val _$started = System.nanoTime;
    val _$result: Var[Puzzle[AP]] = Var(GMatch3.initialize(COLUMN)({
      final class $anon extends IndexedSeqGen {
        def <init>() = {
          super.<init>();
          ()
        };
        def convert[T >: _root_.scala.Nothing <: _root_.scala.Any](seq: Seq[T]): IndexedSeq[T] = ArrayBuffer.apply((seq: _*))
      };
      new $anon()
    }));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initializer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def seed: _root_.scala.Function0[AP] = {
    val _$started = System.nanoTime;
    val _$result: _root_.scala.Function0[AP] = (() => new AP(MathUtils.random(0, 3)));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,seed)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val fixed = initializer;
  val falling = initializer;
  val swiping: Var[Map[AP, Seq[Task]]] = Var(Map.empty.withDefaultValue(Nil));
  val future = initializer;
  val futureIndices = future.map(GMatch3.toIndexMap);
  val fallingFlagMap = falling.map(GMatch3.toContainsMap);
  var panelAdd = ((panels: Seq[scala.Tuple3[AP, Int, Int]]) => ());
  var panelRemove = ((panels: Seq[AP]) => ());
  def scanAll = {
    val _$started = System.nanoTime;
    val _$result = {
      val cpy = swiping();
      scanAllWithException(fixedFuture)(3)(((p) => cpy(p).isEmpty.unary_$bang))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAll)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct = {
    val _$started = System.nanoTime;
    val _$result = scanAll.flatten.map(((x$1) => x$1._1)).distinct;
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanAllDistinct2 = {
    val _$started = System.nanoTime;
    val _$result = {
      val cpy = swiping();
      GMatch3.scanAll(fixedFuture)(ROW)(COLUMN)(((a, b) => if (a.$bang$eq(null).$amp$amp(b.$bang$eq(null)).$amp$amp(cpy(a).isEmpty).$amp$amp(cpy(b).isEmpty))
  a.n.$eq$eq(b.n)
else
  false)).filter(((x$2) => x$2.size.$greater(2))).flatten
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanAllDistinct2)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fixedFuture = {
    val _$started = System.nanoTime;
    val _$result = fixed().zipWithIndex.map(<empty> match {
      case scala.Tuple2((row @ _), (x @ _)) => row.zipWithIndex.map(<empty> match {
        case scala.Tuple2((p @ _), (y @ _)) => future()(x)(y)
      })
    });
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fixedFuture)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def scanRemoveFill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      remove(scanAllDistinct2);
      fill()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,scanRemoveFill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def swipe(x: Int, y: Int, nx: Int, ny: Int) = {
    val _$started = System.nanoTime;
    val _$result = try {
      def verified = y.$less(fixed()(x).size).$amp$amp(ny.$less(fixed()(nx).size));
      if (verified)
        {
          val pa = future()(x)(y);
          val pb = future()(nx)(ny);
          import Animator._;
          import Interpolation._;
          var pTask: Task = null;
          val task = {
  <synthetic> val x$16 = {
  <synthetic> val x$6 = scala.Tuple2(pa.x, nx);
  {
  <synthetic> val x$5 = scala.Tuple2(pa.y, ny);
  {
  <synthetic> val x$4 = scala.Tuple2(pb.x, x);
  {
  <synthetic> val x$3 = scala.Tuple2(pb.y, y);
  Nil.$colon$colon(x$3)
}.$colon$colon(x$4)
}.$colon$colon(x$5)
}.$colon$colon(x$6)
}.map(<empty> match {
  case scala.Tuple2((v @ _), (tgt @ _)) => interpolate(v).to(tgt).in(0.3).using(exp10Out)
}).$bar$greater(((x$7) => WaitAll((x$7: _*))));
  {
  <synthetic> val x$15 = Do({
    swiping().$plus$plus$eq({
      <synthetic> val x$13 = pa.$minus$greater(swiping().get(pa).map(((x$8) => x$8.filterNot(((x$9) => x$9.$eq$eq(pTask))))).$bar(Nil));
      {
  <synthetic> val x$12 = pb.$minus$greater(swiping().get(pb).map(((x$10) => x$10.filterNot(((x$11) => x$11.$eq$eq(pTask))))).$bar(Nil));
  Nil.$colon$colon(x$12)
}.$colon$colon(x$13)
    });
    swiping.update(swiping().filterNot(((x$14) => x$14._2.isEmpty)));
    if (verified)
      {
        fixed.update(fixed().swap(x, y, nx, ny));
        scanRemoveFill()
      }
    else
      ()
  });
  Nil.$colon$colon(x$15)
}.$colon$colon(x$16)
}.$bar$greater(((x$17) => Sequence((x$17: _*))));
          pTask = task;
          swiping().$plus$plus$eq({
            <synthetic> val x$19 = pa.$minus$greater(swiping().get(pa).$bar(Nil).$colon$plus(task));
            {
  <synthetic> val x$18 = pb.$minus$greater(swiping().get(pb).$bar(Nil).$colon$plus(task));
  Nil.$colon$colon(x$18)
}.$colon$colon(x$19)
          });
          future.update(future().swap(x, y, nx, ny));
          processor.add(task)
        }
      else
        ()
    } catch {
      case (e @ (_: Exception)) => e.printStackTrace()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,swipe)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def fill(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val filling = future().createFillingPuzzle(seed, COLUMN);
      if (filling.exists(((x$20) => x$20.isEmpty.unary_$bang)))
        {
          printTime("fill:update failling")(falling.update(falling().append(filling)));
          printTime("fill:update future")(future.update(fixed().append(falling())));
          val fillingMap = filling.toIndexMap;
          val indexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$21 = fillingMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$21._1;
            val y = x$21._2;
            scala.Tuple3(p, x, y)
          }));
          val futureMap = futureIndices();
          val futureIndexed = filling.flatten.map(((p) => {
            <synthetic> private[this] val x$22 = futureMap(p): @scala.unchecked match {
              case scala.Tuple2((x @ _), (y @ _)) => scala.Tuple2(x, y)
            };
            val x = x$22._1;
            val y = x$22._2;
            scala.Tuple3(p, x, y)
          }));
          indexed.withFilter(((check$ifrefutable$1) => check$ifrefutable$1: @scala.unchecked match {
  case scala.Tuple3((p @ _), (x @ _), (y @ _)) => true
  case _ => false
})).foreach(((x$23) => x$23: @scala.unchecked match {
            case scala.Tuple3((p @ _), (x @ _), (y @ _)) => {
              p.x.update(x);
              p.y.update(COLUMN.$plus(y))
            }
          }));
          panelAdd(futureIndexed)
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,fill)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def cancelSwipingAnimation(panel: AP): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = swiping().get(panel).foreach(((tasks) => tasks.foreach(((task) => {
      log("canceled!".$plus(panel));
      swiping().$plus$eq(panel.$minus$greater(swiping()(panel).filterNot(((x$24) => x$24.$eq$eq(task)))))
    }))));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,cancelSwipingAnimation)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def remove(panels: Seq[AP]): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      if (panels.isEmpty.unary_$bang)
        {
          <synthetic> private[this] val x$25 = fixedFuture.remove(panels): @scala.unchecked match {
            case scala.Tuple2((left @ _), (fallen @ _)) => scala.Tuple2(left, fallen)
          };
          val left = x$25._1;
          val fallen = x$25._2;
          fallen.foreach(((x$26) => x$26.foreach(cancelSwipingAnimation)));
          panelRemove(panels);
          fixed.update(left);
          falling.update(fallen.append(falling()));
          future.update(fixed().append(falling()))
        }
      else
        ();
      updateTargetPosition()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,remove)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def updateTargetPosition(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      val indices = futureIndices();
      falling().foreach(((row) => row.foreach(((p) => {
        <synthetic> private[this] val x$27 = indices(p): @scala.unchecked match {
          case scala.Tuple2((tx @ _), (ty @ _)) => scala.Tuple2(tx, ty)
        };
        val tx = x$27._1;
        val ty = x$27._2;
        p.tx.update(tx);
        p.ty.update(ty)
      }))))
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateTargetPosition)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def initialize(): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = fill();
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,initialize)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def update(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      updateFalling(delta);
      processor.update(delta)
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,update)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  def newPuzzleBuffer: ArrayBuffer[ArrayBuffer[AP]] = {
    val _$started = System.nanoTime;
    val _$result: ArrayBuffer[ArrayBuffer[AP]] = ArrayBuffer((0.until(ROW).map(((x$28) => ArrayBuffer.empty[AP])): _*));
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,newPuzzleBuffer)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  val finishedBuf = ListBuffer.empty[AP];
  val continuedBuf = newPuzzleBuffer;
  val fallingBuffer = ArrayBuffer((0.until(ROW).map(((x$29) => ArrayBuffer.empty[AP])): _*));
  val fixedBuf = newPuzzleBuffer;
  val fixedTemp = mutable.Stack.empty[AP];
  def updateFalling(delta: Float): scala.Unit = {
    val _$started = System.nanoTime;
    val _$result: scala.Unit = {
      {
        val fallingCpy = falling();
        val width = fallingCpy.size;
        var x = 0;
        while$2(){
          if (x.$less(width))
            {
              {
                val applied = fallingCpy(x);
                val height = applied.size;
                var y = 0;
                while$1(){
                  if (y.$less(height))
                    {
                      {
                        val p = applied(y);
                        p.vy().$plus$eq(gravity.$times(delta));
                        if (p.update(delta))
                          finishedBuf.$plus$eq(p)
                        else
                          continuedBuf(x).$plus$eq(p);
                        y.$plus$eq(1)
                      };
                      while$1()
                    }
                  else
                    ()
                };
                x.$plus$eq(1)
              };
              while$2()
            }
          else
            ()
        }
      };
      if (finishedBuf.isEmpty.unary_$bang)
        {
          {
            var x = 0;
            while$4(){
              if (x.$less(ROW))
                {
                  {
                    val row = fallingBuffer(x);
                    row.clear();
                    var y = 0;
                    val conRow = continuedBuf(x);
                    val height = conRow.size;
                    while$3(){
                      if (y.$less(height))
                        {
                          {
                            row.$plus$eq(conRow(y));
                            y.$plus$eq(1)
                          };
                          while$3()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$4()
                }
              else
                ()
            };
            falling.update(fallingBuffer)
          };
          {
            var x = 0;
            while$7(){
              if (x.$less(ROW))
                {
                  {
                    val row = fixed()(x);
                    val length = row.size;
                    val buf = fixedBuf(x);
                    fixedTemp.clear();
                    var y = 0;
                    while$5(){
                      if (y.$less(length))
                        {
                          {
                            fixedTemp.push(row(y));
                            y.$plus$eq(1)
                          };
                          while$5()
                        }
                      else
                        ()
                    };
                    buf.clear();
                    while$6(){
                      if (fixedTemp.isEmpty.unary_$bang)
                        {
                          buf.$plus$eq(fixedTemp.pop());
                          while$6()
                        }
                      else
                        ()
                    };
                    x.$plus$eq(1)
                  };
                  while$7()
                }
              else
                ()
            }
          };
          finishedBuf.foreach(((p) => fixedBuf(p.tx()).$plus$eq(p)));
          fixed.update(fixedBuf);
          scanRemoveFill()
        }
      else
        ();
      var i = 0;
      while$8(){
        if (i.$less(ROW))
          {
            {
              continuedBuf(i).clear();
              i.$plus$eq(1)
            };
            while$8()
          }
        else
          ()
      };
      finishedBuf.clear()
    };
    val _$finished = System.nanoTime;
    scala.Predef.println("(ActionPuzzle3,updateFalling)".$plus(_$finished.$minus(_$started)));
    _$result
  };
  class AP extends GMatch3.Panel with Reactor {
    <paramaccessor> val n: Int = _;
    def <init>(n: Int) = {
      super.<init>();
      ()
    };
    val x = Var(0.0);
    val y = Var(0.0);
    val vx = Var(0.0);
    val vy = Var(0.0);
    val tx = Var(0);
    val ty = Var(0);
    lazy val isSwiping = swiping.map(((x$30) => x$30(this).isEmpty.unary_$bang));
    lazy val isFalling = fallingFlagMap.map(((x$31) => x$31(this)));
    def matchTo(panel: Panel): Boolean = panel match {
      case (p @ (_: AP)) => n.$eq$eq(p.n)
      case _ => false
    };
    def update(delta: Float): Boolean = {
      val nx = x().$plus(vx().$times(delta));
      var ny = y().$plus(vy().$times(delta));
      val next = PartialFunction.condOpt(ty().$minus(1))(future()(tx()));
      val finished = next match {
        case Some((p @ _)) if fixed().exists(((x$32) => x$32.contains(p))) => ny.$minus(ty()).$less(0.0)
        case Some((p @ _)) if ny.$minus(p.y()).$less(1.0) => {
          ny = p.y().$plus(1);
          vy.update(p.vy());
          false
        }
        case _ => ny.$minus(ty()).$less(0.0)
      };
      if (finished)
        {
          ny = ty();
          clear()
        }
      else
        ();
      x.update(nx);
      y.update(ny);
      finished
    };
    def clear(): scala.Unit = {
      vx.update(0);
      vy.update(0)
    };
    override def toString: String = n.$plus("")
  }
}
[0m[[33mwarn[0m] [0mthere were 2 feature warning(s); re-run with -feature for details[0m
[0m[[33mwarn[0m] [0mtwo warnings found[0m
[0m[[0minfo[0m] [0mRunning com.glyph.Main [0m
[0m[[0minfo[0m] [0m{"screenClass":{"class":"com.glyph.scala.game.action_puzzle.screen.ActionScreen"},"assets":[{"_1":{"class":"com.badlogic.gdx.graphics.Texture"},"_2":["data/dummy.png","data/particle.png","data/sword.png"]},{"_1":{"class":"com.badlogic.gdx.scenes.scene2d.ui.Skin"},"_2":["skin/default.json"]}]}[0m
[0m[[0minfo[0m] [0mspecified resource directory:../common/src/main/resources=>/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources[0m
[0m[[0minfo[0m] [0mstart Memory Analyzer[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mCreated LoadingScreen[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.lib.libgdx.screen.LoadingScreen@cbbd692[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mloading...[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/json/gameConfig.json[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mgameConfig.json[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/string.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mstring.js[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)12843000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)34712000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)4614000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)5070000[0m
[0m[[0minfo[0m] [0m(GMatch3,initialize)4467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initializer)7837000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2917000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)2684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,newPuzzleBuffer)196000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1024000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)30364000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)2269000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)2342000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)5116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2653000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)3355000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)9614000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)9863000[0m
[0m[[0minfo[0m] [0mGdxFilePath:/Users/glyph/Documents/sbt/scalagamerepo/desktop/../common/src/main/resources/constants/colors.js[0m
[0m[[0minfo[0m] [0mload RFile:[0m
[0m[[0minfo[0m] [0mcolors.js[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10022000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)267403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,initialize)267515000[0m
[0m[[0minfo[0m] [0msetScreen:com.glyph.scala.game.action_puzzle.screen.ActionScreen@25675779[0m
[0m[[0minfo[0m] [0mshow StagedScreen[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)34518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10577000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10721000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10989000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10821000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10968000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10820000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10963000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11962000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10038000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11869000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12069000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9027000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)22352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)22493000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8793000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8673000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9096000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8094000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8072000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1516000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)2379000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1706000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)122000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)251000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)14247000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)2309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2392000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)5308000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22778000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)44699000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)44779000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)2336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)413000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2871000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)8520000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)66000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)63000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)88000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)86000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)67000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)14563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)16341000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)382000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)16657000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)295000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1814000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)312000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2474000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1555000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)48435000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)781000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)365000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1382000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)8010000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)284000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2132000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2634000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)791000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)16845000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)81843000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)117644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)117730000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1147000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1735000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1820000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1487000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)2223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8461000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)23302000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)23386000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)396000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1559000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)158000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)1537000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)2492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)3823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6737000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)16382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28932000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)29012000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)977000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)407000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1013000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3059000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3919000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)7054000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)7163000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1394000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12645000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24132000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24206000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)456000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2074000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4929000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)634000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)1490000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)274000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)943000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)272000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)778000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)12377000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)678000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)680000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)929000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)6351000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)269000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1918000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2351000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)523000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)758000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)13652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)31131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)44820000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)44894000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)911000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)482000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1003000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)234000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2930000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3879000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)528000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)641000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)293000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)931000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)318000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)6159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)3033000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)24331000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)826000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)366000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)999000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)5653000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)260000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1987000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2420000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)516000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)649000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)13268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)41646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)56548000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)56621000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)443000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1000000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2751000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)10090000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)429000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)511000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)244000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1200000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)276000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)14326000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)634000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)321000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)36170000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)40400000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)332000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2684000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)3215000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)517000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)578000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)48004000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)72644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)82580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)82655000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)540000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)112000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2550000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)614000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)678000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6999000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)17363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)17474000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)790000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)947000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)981000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)5564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)413000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)696000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8799000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15334000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)766000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)449000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1029000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3997000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)387000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)717000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11454000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)928000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1082000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1594000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)186000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)81000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)258000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)5254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)376000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)1252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1852000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)9167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15390000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1038000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)466000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1028000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3810000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)326000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)717000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10400000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)492000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1316000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3074000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7086000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)298000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)15241000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)510000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)974000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)99000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)834000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3895000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4833000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)245000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)834000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6076000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12400000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)562000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)697000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)692000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)679000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)677000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)678000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)664000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)586000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)674000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)717000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)870000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)661000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)662000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1714000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)514000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)518000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)666000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)654000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)982000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2825000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3932000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)426000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9242000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)522000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1074000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3020000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3984000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)220000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4985000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9987000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)1224000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1014000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2833000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4511000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)218000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)125000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)593000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9625000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)494000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)961000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2797000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)124000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)183000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)732000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5051000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8808000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8881000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)504000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1405000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3245000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)163000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)851000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8969000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9042000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)518000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)10000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2544000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)254000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)36000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)695000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)1671000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)250000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)356000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1947000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)13866000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)678000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)327000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)410000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)4155000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)272000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1960000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2433000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)613000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)692000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10838000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)30300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)33928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)34002000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)499000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1063000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)124000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3051000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)194000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)857000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9618000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9691000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)523000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)614000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1832000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)284000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3812000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4709000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)178000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)120000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1737000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)6789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)12935000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13003000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1033000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)540000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)5773000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)56000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)7520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)8415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)172000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)91000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)9319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)402000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)405000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)405000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)413000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)470000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)437000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)926000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)53000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3918000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)130000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7473000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7545000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)437000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)952000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)57000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)109000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7000000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7082000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)151000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)207000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)144000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)146000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)148000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)158000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)75568000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)3505000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)131979000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7240000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)323000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)5852000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)298000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2724000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)7693000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)465000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)5854000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)571000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)285000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)6046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)626000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)27000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)319000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)390000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1442000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)159000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)397000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)77000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)522000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)86000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)81000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)81000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)80000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)4674000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)5352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)74000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)24000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)14744000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)52321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)32000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)676000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)35000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)534000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)595000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)714000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)29000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)415000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)926000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)95000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)82000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)83000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)212000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)82000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)146000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)83000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)86000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)83000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)84000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)87000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)82000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)85000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3996000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6977000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)22000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)80000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)16000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)1322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8606000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)410000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1205000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)90000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2579000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)76000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)75000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1218000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)606000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)73000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)76000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)7769000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)8498000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)534000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)951000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)303000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)180000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)234000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)55000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)7608000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)628000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)436000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)312000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)3661000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1535000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1906000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)470000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)83000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)26997000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)50652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)301000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)412000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)3078000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)61000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)71000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)173000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)280000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)35000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)73000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)78000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)76000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)6934000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)208000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)7852000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)314000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)388000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)5983000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)68000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)52000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)244000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)72000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)70000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)79000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)34000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)69000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2038000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)66000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)64000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)10475000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)11145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)89000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)143000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)67000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)502000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)11950000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)34051000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)433000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)992000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)422000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)400000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)396000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)424000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)457000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)585000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)243000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)366000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)379000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)485000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)442000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)354000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)378000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)896000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)111000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)88000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)142000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)37000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)456000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7355000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)352000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)840000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)37000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)97000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3925000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7672000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7738000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)391000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1267000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)50000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)41000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)59000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3056000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3747000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)41000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)96000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)484000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7691000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)432000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)893000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)51000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)43000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)49000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2993000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3721000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)82000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)17000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7417000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7483000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)746000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)839000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)62000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)45000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)571000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)179000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)134000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)238000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)10120000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)862000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)273000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)220000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)2838000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2154000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2613000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)477000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)35000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)9143000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)23129000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)26179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)273000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)273000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)661000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)155000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)157000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)209000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)391000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)318000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)5810000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)377000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)378000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)373000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)377000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)456000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)137000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)139000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)355000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)846000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)46000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)40000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)48000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)340000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)198000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)734000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)87000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)8480000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1165000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)272000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)486000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)3474000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)197000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1783000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2127000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)722000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)140000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)11526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)23619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)29284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)641000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)764000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)731000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)262000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)854000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2890000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)171000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)523000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6953000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7010000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)285000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)865000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)32000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1501000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3881000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4511000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)120000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)174000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8292000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)270000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)864000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3077000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)170000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4017000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6871000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)656000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)543000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)560000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)655000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)546000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)643000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)613000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)711000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)644000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)609000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)514000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)687000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)607000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)603000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)605000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1664000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)613000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)661000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)587000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)277000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)825000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)99000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)146000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)82000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3407000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6082000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6135000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)272000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)55000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)845000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)87000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)135000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6158000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)291000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)961000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2802000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)79000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)127000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)482000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5995000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6052000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)784000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2703000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)56000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)474000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5796000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)287000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)784000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4805000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)6939000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)60000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)107000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)459000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)234000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)334000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)235000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)335000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)308000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)430000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)344000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)31000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)28000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)27000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2658000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)151000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3970000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6981000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)307000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1047000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2883000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)80000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)130000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)427000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6021000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6075000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)776000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3299000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)88000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7154000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)770000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1971000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)387000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)193000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)389000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1481000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)23839000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)720000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)330000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)457000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)2319000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)199000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1331000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1664000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)595000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)655000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)82000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7901000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)34409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)37163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)37219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)699000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)551000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)654000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)537000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)558000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)665000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)583000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)724000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1070000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)715000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)720000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)815000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2219000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)525000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)652000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)696000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)973000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)538000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)526000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)865000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)534000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)634000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)744000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1342000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1489000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)396000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)280000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)792000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2039000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2567000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)290000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)360000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)431000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)1560000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)2167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)122000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)16554000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)2081000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)297000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)529000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)7228000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)607000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1456000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)2255000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)712000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)766000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)15728000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)34994000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)37970000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)38027000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)334000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2041000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)160000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5058000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)9594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9651000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)252000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1827000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3058000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)156000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)12681000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)48549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)52374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)55255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)55311000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)266000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)978000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)148000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)86000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3591000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)608000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)877000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)710000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)685000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)703000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)844000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)4024000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)885000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)570000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)764000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)790000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)964000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)873000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1145000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)800000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)597000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)786000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)529000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)414000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)889000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)137000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)78000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)619000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3998000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7765000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)287000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)775000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4271000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)7237000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)7790000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)244000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8624000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11715000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11944000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)315000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)743000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)42000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2546000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)63000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)106000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6992000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7618000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)326000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)322000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)723000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1913000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)50000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)96000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)546000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)832000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)7032000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)405000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)405000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)220000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)409000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)221000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)302000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)737000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)211000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)96000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2226000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2741000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)314000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)7000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)211000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)376000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)192000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1214000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5561000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)543000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)277000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)493000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)2372000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)196000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1290000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1619000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)475000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)15527000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)19554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)529000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)635000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)317000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)18066000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)979000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)502000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)683000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)496000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)678000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)603000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)406000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)403000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)702000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)260000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)721000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1891000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)104000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)456000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3063000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5518000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)447000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)884000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)60000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)98000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2755000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)104000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)451000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3437000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6933000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7158000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)723000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2899000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)59000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)103000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5759000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5981000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)268000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)714000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2880000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)55000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)98000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3545000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5831000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)279000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)686000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)38000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)29000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)10214000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)10727000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)323000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)387000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)190000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)356000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)195000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5582000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)597000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)323000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)318000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)2147000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)196000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1482000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1802000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)517000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)55000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)7707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)24188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)26280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)26476000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)713000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)589000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)613000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)367000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)298000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)288000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)723000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)59000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)561000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)586000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)438000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)618000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)552000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)536000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)468000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)715000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1783000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)152000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2985000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)459000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)563000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)461000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)507000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)406000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)467000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)754000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)848000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)404000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)437000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)518000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)266000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)685000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1799000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)53000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)93000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5427000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)272000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)696000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)91000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)40000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2890000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4870000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4921000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)484000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)9225000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)732000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)25000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1796000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)11293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)329000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)470000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)181000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)383000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)193000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5198000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)577000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)251000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)370000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)1814000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)199000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)970000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1276000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)480000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)22773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)24836000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)24888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)600000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)687000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)384000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1049000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)670000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3611000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)493000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)661000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)761000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)507000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)685000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)425000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3750000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)743000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)818000[0m
[0m[[0minfo[0m] [0mtotal heap: 3512kb[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)344000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1089000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)3174000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)233000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)10635000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)11386000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)12438000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)12892000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)91000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)133000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)463000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)13605000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)15436000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)16051000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)337000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)22395000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)222000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)686000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1696000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2114000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)113000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)64000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)439000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2777000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4083000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4400000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)316000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)957000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)2071000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)222000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)680000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)75000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)54000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1994000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2427000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)78000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)119000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)79000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)466000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4908000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)227000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)685000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)22000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1840000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2279000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)116000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)60000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)445000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)424000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)805000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)413000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)262000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)274000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)690000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1859000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)117000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)61000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3013000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)758000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)753000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)410000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)293000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)237000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)688000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1720000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)111000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)596000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)3035000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4955000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)234000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)727000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)30000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1885000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)382000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)469000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)330000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)177000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)952000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5059000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)908000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)264000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)4045000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)4772000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)158000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)740000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)990000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)607000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)77000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)10037000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)18141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)19354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)19605000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)325000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)219000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)620000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1580000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1894000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)77000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)113000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)208000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)621000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4039000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)1112000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)595000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1530000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2753000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)218000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!1[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5592000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!3[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)764000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!2[0m
[0m[[0minfo[0m] [0mActionPuzzle3: canceled!2[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)750000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)422000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)157000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)11296000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)506000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)231000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)459000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)1523000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)154000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)828000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1069000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)477000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)516000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)121000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5516000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)19669000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)25381000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1602000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1493000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1041000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)843000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1059000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)826000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1983000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)838000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1005000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)935000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1099000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2352000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1087000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1074000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1069000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)832000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)920000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)907000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)820000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)930000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)905000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)992000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)926000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1029000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1115000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)924000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)907000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)837000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)921000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)874000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)969000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)823000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)912000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)831000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)928000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)935000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1021000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)443000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)183000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)610000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1691000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1973000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)165000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)481000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2723000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4537000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)137000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)596000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)58000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)23000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)14000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1966000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)155000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)456000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4379000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4426000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)523000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)137000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)1024000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)17000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)18000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)20000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)19000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1914000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)553000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2954000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5301000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5347000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)472000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)140000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)928000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)74000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1941000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)145000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)517000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4376000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)162000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)620000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)4571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)139000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)79000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)5260000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8653000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8700000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)569000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)143000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)47000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)667000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)32680000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)32922000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)7000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)143000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)341000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)139000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)633000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2953000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)611000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)230000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)363000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)11737000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)501000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)15526000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)16199000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)954000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)991000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)31945000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)67898000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)69482000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69515000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)615000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)718000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)798000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)676000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)681000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)599000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)665000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)666000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)676000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)380000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)154000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)13000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)379000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)803000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1025000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)99000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)121000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)83000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1598000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3063000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3094000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)465000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)160000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)371000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)798000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1062000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)94000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)117000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)75000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)398000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1636000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3284000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)144000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)399000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1027000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)83000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)106000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)372000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2894000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2925000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)211000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)362000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)767000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)82000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)106000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)63000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1564000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2890000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2923000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)138000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)374000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)141000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)389000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)143000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)277000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)164000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)67000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)5985000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)637000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)232000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)318000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)879000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)142000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)626000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)823000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)558000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5299000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)12361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)13549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)13582000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)544000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)486000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)499000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)660000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)504000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)574000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)730000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)794000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)546000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)144000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)369000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)870000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1081000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)78000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)101000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3431000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)317000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)140000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)380000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1009000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)95000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)60000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1524000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3038000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3070000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)479000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)376000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)828000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)94000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)54000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1902000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3314000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)432000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)377000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)512000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)435000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)492000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)362000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)376000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)443000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)143000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)809000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1018000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)79000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1505000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2592000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2623000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)280000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)152000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)364000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)802000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1020000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)57000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)79000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)43000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2548000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2578000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)269000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)822000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1032000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)50000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)72000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)339000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2532000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)371000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1045000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)464000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)139000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)217000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)134000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3034000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)846000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)247000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)362000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)1100000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)148000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)703000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)915000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)598000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)57000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5897000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10037000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11009000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)11042000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)393000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)147000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)369000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)819000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1031000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)54000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)77000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)43000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1510000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2586000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2616000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)146000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)414000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1049000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)62000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)85000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)43000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1623000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2706000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2739000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)262000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)147000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)21000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)387000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)812000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1023000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1476000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2440000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2511000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)152000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)370000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)33000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1302000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1522000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)468000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)2109000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3040000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)233000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)234000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)285000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)446000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)256000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)838000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1944000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)307000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)261000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)637000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1632000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)231000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)474000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)361000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)268000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)640000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)388000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)459000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)441000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)419000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)418000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)376000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)88000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)911000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1147000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)36000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)57000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)25000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1565000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)366000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)267000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)171000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)374000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)36000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)60000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)27000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)335000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1886000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)273000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)165000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)816000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1041000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)35000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)57000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)181000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)230000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)230000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)1107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)372000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)811000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1044000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)52000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1480000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3358000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)471000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)392000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1395000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)95000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)18000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1871000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2712000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2745000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)136000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)158000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)374000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)801000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1024000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1426000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2131000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)67000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)67000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)75000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)80000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)78000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)76000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)67000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)79000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)363000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)648000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1884000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)150000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)201000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)292000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)643000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1675000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)280000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)593000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)261000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)283000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)912000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)2113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)334000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)331000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)273000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1651000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)372000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)362000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)369000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)375000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)271000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)628000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1748000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)375000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)839000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1070000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)33000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)57000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1523000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3350000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)321000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)355000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)779000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1002000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)346000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1437000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)302000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)175000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)366000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)781000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1011000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5845000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)278000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)276000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)642000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)296000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)162000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)343000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)740000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)956000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)11000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)30000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)324000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)627000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)252000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)632000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1630000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)172000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)99000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)229000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)16000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)775000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1434000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)313000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1855000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)279000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)244000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)335000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)407000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)164000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1025000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1420000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5618000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)284000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)377000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)923000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1156000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)31000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1659000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3064000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)257000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)633000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)258000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)364000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)816000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1055000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)224000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)239000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)641000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1617000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)246000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)246000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)635000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1687000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)366000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)814000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1037000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2874000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)278000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1665000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)260000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)955000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1940000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)716000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)658000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)431000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)270000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)1278000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)2436000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)479000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)503000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)646000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1888000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)738000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)233000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)350000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)35000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)212000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1513000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)503000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)480000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)618000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1610000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)922000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)282000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)601000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1620000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)357000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)781000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1007000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)542000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1639000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)352000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)778000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1004000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)32000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3022000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)311000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)608000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1654000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)463000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)645000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)192000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)26000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)44000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)528000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)9000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1015000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)15000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)37000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)191000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1726000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3765000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)432000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)364000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)612000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1782000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)164000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)39000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)24000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)657000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1128000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)315000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1755000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)422000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)296000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)613000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1895000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)452000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)288000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)356000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)782000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1008000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3074000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)433000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)382000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)822000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1046000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)10000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1446000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3038000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)299000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)641000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)546000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)306000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)616000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1707000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)469000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3656000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)385000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)357000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1062000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1462000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)358000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)780000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1004000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)183000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)355000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)782000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1024000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1421000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)6673000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)308000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)330000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)360000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)790000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1017000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)7127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)267000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)309000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)171000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)500000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)924000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)34000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)8000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1554000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2829000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)221000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)349000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)214000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)303000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)358000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)780000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1006000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)33000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)305000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1400000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2575000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)307000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)357000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)773000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1004000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)157000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)411000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)139000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)149000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)149000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)588000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)28000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2840000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)720000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)227000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)206000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)772000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)144000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)562000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)766000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)438000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)460000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4353000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)8255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)9423000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)327000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)249000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)323000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)289000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)306000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)282000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)357000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)187000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)185000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)274000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)256000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)254000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)186000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)251000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)188000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)253000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)248000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)261000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)384000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)257000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)189000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)258000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)425000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)193000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)259000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)196000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)357000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)15000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)784000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1074000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)62000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)202000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1587000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2804000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2848000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)162000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)355000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)3431000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)3668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)37000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)59000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)23000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)386000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)4177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)5151000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)250000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)353000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)841000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1091000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)68000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)217000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)397000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1618000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2848000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2893000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)165000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)366000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)798000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1024000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)26000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)48000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)19000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)316000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2256000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)290000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)194000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)534000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)1012000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1295000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)30000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)52000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)17000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1736000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2868000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2903000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)149000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)153000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)358000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)991000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)42000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)1000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)310000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2094000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2126000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)225000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)209000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)385000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)806000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1099000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)161000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)422000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)137000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)176000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)176000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)668000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)6512000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)533000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)239000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)136000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)796000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)652000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)876000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)895000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)935000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5686000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)13361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)14550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)14604000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)408000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)142000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)255000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)177000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)184000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)291000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)99000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)300000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)272000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)118000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)127000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)190000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)166000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)178000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)141000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)373000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)776000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)999000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)156000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)409000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)159000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)114000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)140000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)600000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)12000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2625000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)527000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)247000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)15472000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)200000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)997000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)1273000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)485000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)509000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)22000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)19520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)23213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)23903000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)23937000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)169000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)179000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)135000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)110000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)175000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)266000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1556000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)96000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)228000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)239000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)103000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)241000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)308000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)271000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)872000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1783000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)97000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)283000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)192000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)375000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)288000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)278000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1606000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)92000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)337000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)349000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)338000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)372000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)775000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1965000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)152000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)383000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)7000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)413000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)8000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)912000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1382000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)205000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)534000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)176000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)150000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)153000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)667000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)14000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3049000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)503000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)337000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)141000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)848000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)161000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)660000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)886000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)552000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)663000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)31000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4835000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)9325000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)10053000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)10367000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)116000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)399000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)117000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)402000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)393000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)164000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)312000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)690000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)906000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)32000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)51000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)21000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)308000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1312000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2896000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)368000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)100000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)336000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)337000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)102000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)98000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)362000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)157000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)270000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)163000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)367000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)731000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)961000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)153000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)390000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)6000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)136000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)231000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)54531000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)579000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)95000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)57192000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)472000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)235000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)219000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)824000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)141000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)627000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)821000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)609000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)638000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)56000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)5213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)63415000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)65023000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)309000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,swipe)1559000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)275000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)629000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)283000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)259000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)212000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)2024000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)6000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)2434000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)2710000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)378000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)141000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)253000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)134000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)675000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2652000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)431000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)220000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)362000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)924000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)146000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)532000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)732000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)649000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)677000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)58000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4958000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10389000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12050000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)345000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)542000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)594000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)344000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)252000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)152000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)540000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)744000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)62000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)80000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)49000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)328000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)3037000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)354000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)488000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)493000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)371000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)506000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)482000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)343000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)479000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)348000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)344000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)484000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)356000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)501000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)878000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,swap)338000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)200000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)248000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)795000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1068000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)197000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)466000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)181000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)325000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)188000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)684000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)74000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)3021000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)1129000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)314000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)534000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)1283000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)691000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)923000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)515000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)539000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)6079000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)10229000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12576000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)410000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)489000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)412000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)483000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)478000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)549000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)449000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)520000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)383000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)450000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)474000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)430000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)363000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)366000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)374000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)893000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)961000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)359000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)428000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)361000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)429000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)364000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)431000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)297000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)138000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)176000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)547000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)742000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)65000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)83000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)51000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)332000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1204000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2373000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)258000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)141000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)176000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)548000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)861000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)133000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)157000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)161000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)56000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)340000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1416000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2455000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2489000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)248000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)141000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)156000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)732000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)67000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)40000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)320000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2205000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)154000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)206000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)572000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)789000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)146000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)414000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)138000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)251000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)183000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)370000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)45000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2500000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)443000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)226000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)199000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)713000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)142000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)709000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)916000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)455000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)477000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4365000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)7716000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8674000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8708000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)292000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)360000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)11978000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)12056000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)206000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)267000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)276000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)199000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)266000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)271000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)263000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)198000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)264000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)201000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)267000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)214000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)211000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)277000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)265000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)268000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)200000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)266000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)141000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)155000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)566000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)766000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)52000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)71000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)39000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)312000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1195000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2113000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2243000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)244000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)167000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)165000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)529000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)772000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)48000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)65000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)331000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1216000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4848000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)4880000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)246000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)147000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)166000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)532000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)737000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)47000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)65000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)158000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)490000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1341000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2216000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)240000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)144000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)157000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)531000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)732000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)62000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)159000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)35000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)314000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1154000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1987000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2018000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)171000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)571000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)44000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)160000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)32000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)311000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1194000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2014000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2046000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)896000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)1101000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)42000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)60000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)163000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)34000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)413000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1622000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2418000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2453000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)232000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)142000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)485000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)145000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,remove)391000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,cancelSwipingAnimation)2000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)142000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)198000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)139000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)358000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)38000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)2254000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)441000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)443000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)208000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update failling)976000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,append)142000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)374000[0m
[0m[[0minfo[0m] [0mActionPuzzle3: (ActionPuzzle3,fill:update future)562000[0m
[0m[[0minfo[0m] [0m(GMatch3,toIndexMap)444000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,toIndexMap)463000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)50000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)4600000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)7590000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)8355000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)8387000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)175000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)239000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)236000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)144000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)169000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)713000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)43000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)61000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)167000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)33000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)322000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1347000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2203000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2236000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)227000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)148000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)12000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)546000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)752000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)34000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)98000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)210000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)444000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1351000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2196000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)213000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)238000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)153000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)223000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)112000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)183000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)222000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)287000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)104000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)108000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)174000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)111000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)176000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)172000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)119000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)107000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)171000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)105000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)168000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)182000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)242000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)106000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)170000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)165000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)168000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)11000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)160000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)4000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)533000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)774000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)29000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)47000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)164000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)18000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)304000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1173000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)2550000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)2582000[0m
[0m[[0minfo[0m] [0m(GMatch3,toContainsMap)138000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fixedFuture)165000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,verticalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,horizontalLine)0[0m
[0m[[0minfo[0m] [0m(GMatch3,allLine)265000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)5000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)3000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)2000[0m
[0m[[0minfo[0m] [0m(GMatch3,segment2)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,scanAll)689000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanAllDistinct2)915000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)13000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,remove)30000[0m
[0m[[0minfo[0m] [0m(PuzzleImpl,createFillingPuzzle)2000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,seed)1000[0m
[0m[[0minfo[0m] [0m(GMatch3,createFillingPuzzle)162000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateTargetPosition)9000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,fill)294000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,scanRemoveFill)1286000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)1939000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)1972000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)77000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)73000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)66000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)72000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)71000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)69000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)87000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)3000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)5000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)68000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,updateFalling)4000[0m
[0m[[0minfo[0m] [0m(ActionPuzzle3,update)70000[0m
[0m[[0minfo[0m] [0mpause![0m
java.lang.RuntimeException: Nonzero exit code returned from runner: 255
	at scala.sys.package$.error(package.scala:27)
[0m[[31mtrace[0m] [0mStack trace suppressed: run [34mlast desktop/compile:run[0m for the full output.[0m
[0m[[31merror[0m] [0m(desktop/compile:[31mrun[0m) Nonzero exit code returned from runner: 255[0m
[0m[[31merror[0m] [0mTotal time: 135 s, completed 2013/11/16 0:14:47[0m
